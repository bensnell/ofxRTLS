// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Trackable.proto

#include "Trackable.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_Trackable_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_Trackable_Trackable_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Trackable_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Trackable_Acceleration_Trackable_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Trackable_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Trackable_AngularAcceleration_Trackable_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Trackable_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Trackable_AngularVelocity_Trackable_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Trackable_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Trackable_Orientation_Trackable_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Trackable_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Trackable_Position_Trackable_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Trackable_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Trackable_Velocity_Trackable_2eproto;
namespace RTLSProtocol {
class Trackable_PositionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Trackable_Position> _instance;
} _Trackable_Position_default_instance_;
class Trackable_OrientationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Trackable_Orientation> _instance;
} _Trackable_Orientation_default_instance_;
class Trackable_VelocityDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Trackable_Velocity> _instance;
} _Trackable_Velocity_default_instance_;
class Trackable_AccelerationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Trackable_Acceleration> _instance;
} _Trackable_Acceleration_default_instance_;
class Trackable_AngularVelocityDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Trackable_AngularVelocity> _instance;
} _Trackable_AngularVelocity_default_instance_;
class Trackable_AngularAccelerationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Trackable_AngularAcceleration> _instance;
} _Trackable_AngularAcceleration_default_instance_;
class TrackableDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Trackable> _instance;
} _Trackable_default_instance_;
class TrackableFrameDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrackableFrame> _instance;
} _TrackableFrame_default_instance_;
}  // namespace RTLSProtocol
static void InitDefaultsscc_info_Trackable_Trackable_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::RTLSProtocol::_Trackable_default_instance_;
    new (ptr) ::RTLSProtocol::Trackable();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RTLSProtocol::Trackable::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_Trackable_Trackable_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 6, 0, InitDefaultsscc_info_Trackable_Trackable_2eproto}, {
      &scc_info_Trackable_Position_Trackable_2eproto.base,
      &scc_info_Trackable_Orientation_Trackable_2eproto.base,
      &scc_info_Trackable_Velocity_Trackable_2eproto.base,
      &scc_info_Trackable_Acceleration_Trackable_2eproto.base,
      &scc_info_Trackable_AngularVelocity_Trackable_2eproto.base,
      &scc_info_Trackable_AngularAcceleration_Trackable_2eproto.base,}};

static void InitDefaultsscc_info_Trackable_Acceleration_Trackable_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::RTLSProtocol::_Trackable_Acceleration_default_instance_;
    new (ptr) ::RTLSProtocol::Trackable_Acceleration();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RTLSProtocol::Trackable_Acceleration::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Trackable_Acceleration_Trackable_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Trackable_Acceleration_Trackable_2eproto}, {}};

static void InitDefaultsscc_info_Trackable_AngularAcceleration_Trackable_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::RTLSProtocol::_Trackable_AngularAcceleration_default_instance_;
    new (ptr) ::RTLSProtocol::Trackable_AngularAcceleration();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RTLSProtocol::Trackable_AngularAcceleration::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Trackable_AngularAcceleration_Trackable_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Trackable_AngularAcceleration_Trackable_2eproto}, {}};

static void InitDefaultsscc_info_Trackable_AngularVelocity_Trackable_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::RTLSProtocol::_Trackable_AngularVelocity_default_instance_;
    new (ptr) ::RTLSProtocol::Trackable_AngularVelocity();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RTLSProtocol::Trackable_AngularVelocity::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Trackable_AngularVelocity_Trackable_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Trackable_AngularVelocity_Trackable_2eproto}, {}};

static void InitDefaultsscc_info_Trackable_Orientation_Trackable_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::RTLSProtocol::_Trackable_Orientation_default_instance_;
    new (ptr) ::RTLSProtocol::Trackable_Orientation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RTLSProtocol::Trackable_Orientation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Trackable_Orientation_Trackable_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Trackable_Orientation_Trackable_2eproto}, {}};

static void InitDefaultsscc_info_Trackable_Position_Trackable_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::RTLSProtocol::_Trackable_Position_default_instance_;
    new (ptr) ::RTLSProtocol::Trackable_Position();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RTLSProtocol::Trackable_Position::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Trackable_Position_Trackable_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Trackable_Position_Trackable_2eproto}, {}};

static void InitDefaultsscc_info_Trackable_Velocity_Trackable_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::RTLSProtocol::_Trackable_Velocity_default_instance_;
    new (ptr) ::RTLSProtocol::Trackable_Velocity();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RTLSProtocol::Trackable_Velocity::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Trackable_Velocity_Trackable_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Trackable_Velocity_Trackable_2eproto}, {}};

static void InitDefaultsscc_info_TrackableFrame_Trackable_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::RTLSProtocol::_TrackableFrame_default_instance_;
    new (ptr) ::RTLSProtocol::TrackableFrame();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RTLSProtocol::TrackableFrame::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TrackableFrame_Trackable_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TrackableFrame_Trackable_2eproto}, {
      &scc_info_Trackable_Trackable_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Trackable_2eproto[8];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_Trackable_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Trackable_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Trackable_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RTLSProtocol::Trackable_Position, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RTLSProtocol::Trackable_Position, x_),
  PROTOBUF_FIELD_OFFSET(::RTLSProtocol::Trackable_Position, y_),
  PROTOBUF_FIELD_OFFSET(::RTLSProtocol::Trackable_Position, z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RTLSProtocol::Trackable_Orientation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RTLSProtocol::Trackable_Orientation, x_),
  PROTOBUF_FIELD_OFFSET(::RTLSProtocol::Trackable_Orientation, y_),
  PROTOBUF_FIELD_OFFSET(::RTLSProtocol::Trackable_Orientation, z_),
  PROTOBUF_FIELD_OFFSET(::RTLSProtocol::Trackable_Orientation, w_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RTLSProtocol::Trackable_Velocity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RTLSProtocol::Trackable_Velocity, x_),
  PROTOBUF_FIELD_OFFSET(::RTLSProtocol::Trackable_Velocity, y_),
  PROTOBUF_FIELD_OFFSET(::RTLSProtocol::Trackable_Velocity, z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RTLSProtocol::Trackable_Acceleration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RTLSProtocol::Trackable_Acceleration, x_),
  PROTOBUF_FIELD_OFFSET(::RTLSProtocol::Trackable_Acceleration, y_),
  PROTOBUF_FIELD_OFFSET(::RTLSProtocol::Trackable_Acceleration, z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RTLSProtocol::Trackable_AngularVelocity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RTLSProtocol::Trackable_AngularVelocity, x_),
  PROTOBUF_FIELD_OFFSET(::RTLSProtocol::Trackable_AngularVelocity, y_),
  PROTOBUF_FIELD_OFFSET(::RTLSProtocol::Trackable_AngularVelocity, z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RTLSProtocol::Trackable_AngularAcceleration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RTLSProtocol::Trackable_AngularAcceleration, x_),
  PROTOBUF_FIELD_OFFSET(::RTLSProtocol::Trackable_AngularAcceleration, y_),
  PROTOBUF_FIELD_OFFSET(::RTLSProtocol::Trackable_AngularAcceleration, z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RTLSProtocol::Trackable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RTLSProtocol::Trackable, id_),
  PROTOBUF_FIELD_OFFSET(::RTLSProtocol::Trackable, cuid_),
  PROTOBUF_FIELD_OFFSET(::RTLSProtocol::Trackable, name_),
  PROTOBUF_FIELD_OFFSET(::RTLSProtocol::Trackable, frame_id_),
  PROTOBUF_FIELD_OFFSET(::RTLSProtocol::Trackable, timestamp_),
  PROTOBUF_FIELD_OFFSET(::RTLSProtocol::Trackable, context_),
  PROTOBUF_FIELD_OFFSET(::RTLSProtocol::Trackable, children_),
  PROTOBUF_FIELD_OFFSET(::RTLSProtocol::Trackable, position_),
  PROTOBUF_FIELD_OFFSET(::RTLSProtocol::Trackable, orientation_),
  PROTOBUF_FIELD_OFFSET(::RTLSProtocol::Trackable, velocity_),
  PROTOBUF_FIELD_OFFSET(::RTLSProtocol::Trackable, acceleration_),
  PROTOBUF_FIELD_OFFSET(::RTLSProtocol::Trackable, angular_velocity_),
  PROTOBUF_FIELD_OFFSET(::RTLSProtocol::Trackable, angular_acceleration_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RTLSProtocol::TrackableFrame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RTLSProtocol::TrackableFrame, frame_id_),
  PROTOBUF_FIELD_OFFSET(::RTLSProtocol::TrackableFrame, timestamp_),
  PROTOBUF_FIELD_OFFSET(::RTLSProtocol::TrackableFrame, trackables_),
  PROTOBUF_FIELD_OFFSET(::RTLSProtocol::TrackableFrame, context_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::RTLSProtocol::Trackable_Position)},
  { 8, -1, sizeof(::RTLSProtocol::Trackable_Orientation)},
  { 17, -1, sizeof(::RTLSProtocol::Trackable_Velocity)},
  { 25, -1, sizeof(::RTLSProtocol::Trackable_Acceleration)},
  { 33, -1, sizeof(::RTLSProtocol::Trackable_AngularVelocity)},
  { 41, -1, sizeof(::RTLSProtocol::Trackable_AngularAcceleration)},
  { 49, -1, sizeof(::RTLSProtocol::Trackable)},
  { 67, -1, sizeof(::RTLSProtocol::TrackableFrame)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::RTLSProtocol::_Trackable_Position_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::RTLSProtocol::_Trackable_Orientation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::RTLSProtocol::_Trackable_Velocity_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::RTLSProtocol::_Trackable_Acceleration_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::RTLSProtocol::_Trackable_AngularVelocity_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::RTLSProtocol::_Trackable_AngularAcceleration_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::RTLSProtocol::_Trackable_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::RTLSProtocol::_TrackableFrame_default_instance_),
};

const char descriptor_table_protodef_Trackable_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017Trackable.proto\022\014RTLSProtocol\"\262\006\n\tTrac"
  "kable\022\n\n\002id\030\001 \001(\005\022\014\n\004cuid\030\002 \001(\014\022\014\n\004name\030"
  "\003 \001(\t\022\020\n\010frame_ID\030\n \001(\004\022\021\n\ttimestamp\030\013 \001"
  "(\004\022\017\n\007context\030\014 \001(\014\022)\n\010children\030\r \003(\0132\027."
  "RTLSProtocol.Trackable\0222\n\010position\030\004 \001(\013"
  "2 .RTLSProtocol.Trackable.Position\0228\n\013or"
  "ientation\030\005 \001(\0132#.RTLSProtocol.Trackable"
  ".Orientation\0222\n\010velocity\030\006 \001(\0132 .RTLSPro"
  "tocol.Trackable.Velocity\022:\n\014acceleration"
  "\030\007 \001(\0132$.RTLSProtocol.Trackable.Accelera"
  "tion\022A\n\020angular_velocity\030\010 \001(\0132\'.RTLSPro"
  "tocol.Trackable.AngularVelocity\022I\n\024angul"
  "ar_acceleration\030\t \001(\0132+.RTLSProtocol.Tra"
  "ckable.AngularAcceleration\032+\n\010Position\022\t"
  "\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\022\t\n\001z\030\003 \001(\001\0329\n\013Orien"
  "tation\022\t\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\022\t\n\001z\030\003 \001(\001\022"
  "\t\n\001w\030\004 \001(\001\032+\n\010Velocity\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002"
  " \001(\002\022\t\n\001z\030\003 \001(\002\032/\n\014Acceleration\022\t\n\001x\030\001 \001"
  "(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\0322\n\017AngularVeloc"
  "ity\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\0326\n\023"
  "AngularAcceleration\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001("
  "\002\022\t\n\001z\030\003 \001(\002\"s\n\016TrackableFrame\022\020\n\010frame_"
  "ID\030\001 \001(\004\022\021\n\ttimestamp\030\002 \001(\004\022+\n\ntrackable"
  "s\030\003 \003(\0132\027.RTLSProtocol.Trackable\022\017\n\007cont"
  "ext\030\004 \001(\014b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Trackable_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_Trackable_2eproto_sccs[8] = {
  &scc_info_Trackable_Trackable_2eproto.base,
  &scc_info_Trackable_Acceleration_Trackable_2eproto.base,
  &scc_info_Trackable_AngularAcceleration_Trackable_2eproto.base,
  &scc_info_Trackable_AngularVelocity_Trackable_2eproto.base,
  &scc_info_Trackable_Orientation_Trackable_2eproto.base,
  &scc_info_Trackable_Position_Trackable_2eproto.base,
  &scc_info_Trackable_Velocity_Trackable_2eproto.base,
  &scc_info_TrackableFrame_Trackable_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Trackable_2eproto_once;
static bool descriptor_table_Trackable_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Trackable_2eproto = {
  &descriptor_table_Trackable_2eproto_initialized, descriptor_table_protodef_Trackable_2eproto, "Trackable.proto", 977,
  &descriptor_table_Trackable_2eproto_once, descriptor_table_Trackable_2eproto_sccs, descriptor_table_Trackable_2eproto_deps, 8, 0,
  schemas, file_default_instances, TableStruct_Trackable_2eproto::offsets,
  file_level_metadata_Trackable_2eproto, 8, file_level_enum_descriptors_Trackable_2eproto, file_level_service_descriptors_Trackable_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_Trackable_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_Trackable_2eproto), true);
namespace RTLSProtocol {

// ===================================================================

void Trackable_Position::InitAsDefaultInstance() {
}
class Trackable_Position::_Internal {
 public:
};

Trackable_Position::Trackable_Position()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RTLSProtocol.Trackable.Position)
}
Trackable_Position::Trackable_Position(const Trackable_Position& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:RTLSProtocol.Trackable.Position)
}

void Trackable_Position::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

Trackable_Position::~Trackable_Position() {
  // @@protoc_insertion_point(destructor:RTLSProtocol.Trackable.Position)
  SharedDtor();
}

void Trackable_Position::SharedDtor() {
}

void Trackable_Position::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Trackable_Position& Trackable_Position::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Trackable_Position_Trackable_2eproto.base);
  return *internal_default_instance();
}


void Trackable_Position::Clear() {
// @@protoc_insertion_point(message_clear_start:RTLSProtocol.Trackable.Position)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
  _internal_metadata_.Clear();
}

const char* Trackable_Position::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Trackable_Position::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RTLSProtocol.Trackable.Position)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_x(), target);
  }

  // double y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_y(), target);
  }

  // double z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RTLSProtocol.Trackable.Position)
  return target;
}

size_t Trackable_Position::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RTLSProtocol.Trackable.Position)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 8;
  }

  // double y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 8;
  }

  // double z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Trackable_Position::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RTLSProtocol.Trackable.Position)
  GOOGLE_DCHECK_NE(&from, this);
  const Trackable_Position* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Trackable_Position>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RTLSProtocol.Trackable.Position)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RTLSProtocol.Trackable.Position)
    MergeFrom(*source);
  }
}

void Trackable_Position::MergeFrom(const Trackable_Position& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RTLSProtocol.Trackable.Position)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from.z() <= 0 && from.z() >= 0)) {
    _internal_set_z(from._internal_z());
  }
}

void Trackable_Position::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RTLSProtocol.Trackable.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Trackable_Position::CopyFrom(const Trackable_Position& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RTLSProtocol.Trackable.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Trackable_Position::IsInitialized() const {
  return true;
}

void Trackable_Position::InternalSwap(Trackable_Position* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Trackable_Position::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Trackable_Orientation::InitAsDefaultInstance() {
}
class Trackable_Orientation::_Internal {
 public:
};

Trackable_Orientation::Trackable_Orientation()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RTLSProtocol.Trackable.Orientation)
}
Trackable_Orientation::Trackable_Orientation(const Trackable_Orientation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&w_) -
    reinterpret_cast<char*>(&x_)) + sizeof(w_));
  // @@protoc_insertion_point(copy_constructor:RTLSProtocol.Trackable.Orientation)
}

void Trackable_Orientation::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&w_) -
      reinterpret_cast<char*>(&x_)) + sizeof(w_));
}

Trackable_Orientation::~Trackable_Orientation() {
  // @@protoc_insertion_point(destructor:RTLSProtocol.Trackable.Orientation)
  SharedDtor();
}

void Trackable_Orientation::SharedDtor() {
}

void Trackable_Orientation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Trackable_Orientation& Trackable_Orientation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Trackable_Orientation_Trackable_2eproto.base);
  return *internal_default_instance();
}


void Trackable_Orientation::Clear() {
// @@protoc_insertion_point(message_clear_start:RTLSProtocol.Trackable.Orientation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&w_) -
      reinterpret_cast<char*>(&x_)) + sizeof(w_));
  _internal_metadata_.Clear();
}

const char* Trackable_Orientation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double w = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          w_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Trackable_Orientation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RTLSProtocol.Trackable.Orientation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_x(), target);
  }

  // double y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_y(), target);
  }

  // double z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_z(), target);
  }

  // double w = 4;
  if (!(this->w() <= 0 && this->w() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_w(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RTLSProtocol.Trackable.Orientation)
  return target;
}

size_t Trackable_Orientation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RTLSProtocol.Trackable.Orientation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 8;
  }

  // double y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 8;
  }

  // double z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    total_size += 1 + 8;
  }

  // double w = 4;
  if (!(this->w() <= 0 && this->w() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Trackable_Orientation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RTLSProtocol.Trackable.Orientation)
  GOOGLE_DCHECK_NE(&from, this);
  const Trackable_Orientation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Trackable_Orientation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RTLSProtocol.Trackable.Orientation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RTLSProtocol.Trackable.Orientation)
    MergeFrom(*source);
  }
}

void Trackable_Orientation::MergeFrom(const Trackable_Orientation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RTLSProtocol.Trackable.Orientation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from.z() <= 0 && from.z() >= 0)) {
    _internal_set_z(from._internal_z());
  }
  if (!(from.w() <= 0 && from.w() >= 0)) {
    _internal_set_w(from._internal_w());
  }
}

void Trackable_Orientation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RTLSProtocol.Trackable.Orientation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Trackable_Orientation::CopyFrom(const Trackable_Orientation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RTLSProtocol.Trackable.Orientation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Trackable_Orientation::IsInitialized() const {
  return true;
}

void Trackable_Orientation::InternalSwap(Trackable_Orientation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
  swap(w_, other->w_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Trackable_Orientation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Trackable_Velocity::InitAsDefaultInstance() {
}
class Trackable_Velocity::_Internal {
 public:
};

Trackable_Velocity::Trackable_Velocity()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RTLSProtocol.Trackable.Velocity)
}
Trackable_Velocity::Trackable_Velocity(const Trackable_Velocity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:RTLSProtocol.Trackable.Velocity)
}

void Trackable_Velocity::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

Trackable_Velocity::~Trackable_Velocity() {
  // @@protoc_insertion_point(destructor:RTLSProtocol.Trackable.Velocity)
  SharedDtor();
}

void Trackable_Velocity::SharedDtor() {
}

void Trackable_Velocity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Trackable_Velocity& Trackable_Velocity::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Trackable_Velocity_Trackable_2eproto.base);
  return *internal_default_instance();
}


void Trackable_Velocity::Clear() {
// @@protoc_insertion_point(message_clear_start:RTLSProtocol.Trackable.Velocity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
  _internal_metadata_.Clear();
}

const char* Trackable_Velocity::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Trackable_Velocity::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RTLSProtocol.Trackable.Velocity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // float z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RTLSProtocol.Trackable.Velocity)
  return target;
}

size_t Trackable_Velocity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RTLSProtocol.Trackable.Velocity)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  // float z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Trackable_Velocity::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RTLSProtocol.Trackable.Velocity)
  GOOGLE_DCHECK_NE(&from, this);
  const Trackable_Velocity* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Trackable_Velocity>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RTLSProtocol.Trackable.Velocity)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RTLSProtocol.Trackable.Velocity)
    MergeFrom(*source);
  }
}

void Trackable_Velocity::MergeFrom(const Trackable_Velocity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RTLSProtocol.Trackable.Velocity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from.z() <= 0 && from.z() >= 0)) {
    _internal_set_z(from._internal_z());
  }
}

void Trackable_Velocity::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RTLSProtocol.Trackable.Velocity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Trackable_Velocity::CopyFrom(const Trackable_Velocity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RTLSProtocol.Trackable.Velocity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Trackable_Velocity::IsInitialized() const {
  return true;
}

void Trackable_Velocity::InternalSwap(Trackable_Velocity* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Trackable_Velocity::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Trackable_Acceleration::InitAsDefaultInstance() {
}
class Trackable_Acceleration::_Internal {
 public:
};

Trackable_Acceleration::Trackable_Acceleration()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RTLSProtocol.Trackable.Acceleration)
}
Trackable_Acceleration::Trackable_Acceleration(const Trackable_Acceleration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:RTLSProtocol.Trackable.Acceleration)
}

void Trackable_Acceleration::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

Trackable_Acceleration::~Trackable_Acceleration() {
  // @@protoc_insertion_point(destructor:RTLSProtocol.Trackable.Acceleration)
  SharedDtor();
}

void Trackable_Acceleration::SharedDtor() {
}

void Trackable_Acceleration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Trackable_Acceleration& Trackable_Acceleration::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Trackable_Acceleration_Trackable_2eproto.base);
  return *internal_default_instance();
}


void Trackable_Acceleration::Clear() {
// @@protoc_insertion_point(message_clear_start:RTLSProtocol.Trackable.Acceleration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
  _internal_metadata_.Clear();
}

const char* Trackable_Acceleration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Trackable_Acceleration::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RTLSProtocol.Trackable.Acceleration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // float z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RTLSProtocol.Trackable.Acceleration)
  return target;
}

size_t Trackable_Acceleration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RTLSProtocol.Trackable.Acceleration)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  // float z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Trackable_Acceleration::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RTLSProtocol.Trackable.Acceleration)
  GOOGLE_DCHECK_NE(&from, this);
  const Trackable_Acceleration* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Trackable_Acceleration>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RTLSProtocol.Trackable.Acceleration)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RTLSProtocol.Trackable.Acceleration)
    MergeFrom(*source);
  }
}

void Trackable_Acceleration::MergeFrom(const Trackable_Acceleration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RTLSProtocol.Trackable.Acceleration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from.z() <= 0 && from.z() >= 0)) {
    _internal_set_z(from._internal_z());
  }
}

void Trackable_Acceleration::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RTLSProtocol.Trackable.Acceleration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Trackable_Acceleration::CopyFrom(const Trackable_Acceleration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RTLSProtocol.Trackable.Acceleration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Trackable_Acceleration::IsInitialized() const {
  return true;
}

void Trackable_Acceleration::InternalSwap(Trackable_Acceleration* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Trackable_Acceleration::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Trackable_AngularVelocity::InitAsDefaultInstance() {
}
class Trackable_AngularVelocity::_Internal {
 public:
};

Trackable_AngularVelocity::Trackable_AngularVelocity()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RTLSProtocol.Trackable.AngularVelocity)
}
Trackable_AngularVelocity::Trackable_AngularVelocity(const Trackable_AngularVelocity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:RTLSProtocol.Trackable.AngularVelocity)
}

void Trackable_AngularVelocity::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

Trackable_AngularVelocity::~Trackable_AngularVelocity() {
  // @@protoc_insertion_point(destructor:RTLSProtocol.Trackable.AngularVelocity)
  SharedDtor();
}

void Trackable_AngularVelocity::SharedDtor() {
}

void Trackable_AngularVelocity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Trackable_AngularVelocity& Trackable_AngularVelocity::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Trackable_AngularVelocity_Trackable_2eproto.base);
  return *internal_default_instance();
}


void Trackable_AngularVelocity::Clear() {
// @@protoc_insertion_point(message_clear_start:RTLSProtocol.Trackable.AngularVelocity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
  _internal_metadata_.Clear();
}

const char* Trackable_AngularVelocity::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Trackable_AngularVelocity::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RTLSProtocol.Trackable.AngularVelocity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // float z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RTLSProtocol.Trackable.AngularVelocity)
  return target;
}

size_t Trackable_AngularVelocity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RTLSProtocol.Trackable.AngularVelocity)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  // float z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Trackable_AngularVelocity::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RTLSProtocol.Trackable.AngularVelocity)
  GOOGLE_DCHECK_NE(&from, this);
  const Trackable_AngularVelocity* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Trackable_AngularVelocity>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RTLSProtocol.Trackable.AngularVelocity)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RTLSProtocol.Trackable.AngularVelocity)
    MergeFrom(*source);
  }
}

void Trackable_AngularVelocity::MergeFrom(const Trackable_AngularVelocity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RTLSProtocol.Trackable.AngularVelocity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from.z() <= 0 && from.z() >= 0)) {
    _internal_set_z(from._internal_z());
  }
}

void Trackable_AngularVelocity::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RTLSProtocol.Trackable.AngularVelocity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Trackable_AngularVelocity::CopyFrom(const Trackable_AngularVelocity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RTLSProtocol.Trackable.AngularVelocity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Trackable_AngularVelocity::IsInitialized() const {
  return true;
}

void Trackable_AngularVelocity::InternalSwap(Trackable_AngularVelocity* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Trackable_AngularVelocity::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Trackable_AngularAcceleration::InitAsDefaultInstance() {
}
class Trackable_AngularAcceleration::_Internal {
 public:
};

Trackable_AngularAcceleration::Trackable_AngularAcceleration()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RTLSProtocol.Trackable.AngularAcceleration)
}
Trackable_AngularAcceleration::Trackable_AngularAcceleration(const Trackable_AngularAcceleration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:RTLSProtocol.Trackable.AngularAcceleration)
}

void Trackable_AngularAcceleration::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

Trackable_AngularAcceleration::~Trackable_AngularAcceleration() {
  // @@protoc_insertion_point(destructor:RTLSProtocol.Trackable.AngularAcceleration)
  SharedDtor();
}

void Trackable_AngularAcceleration::SharedDtor() {
}

void Trackable_AngularAcceleration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Trackable_AngularAcceleration& Trackable_AngularAcceleration::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Trackable_AngularAcceleration_Trackable_2eproto.base);
  return *internal_default_instance();
}


void Trackable_AngularAcceleration::Clear() {
// @@protoc_insertion_point(message_clear_start:RTLSProtocol.Trackable.AngularAcceleration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
  _internal_metadata_.Clear();
}

const char* Trackable_AngularAcceleration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Trackable_AngularAcceleration::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RTLSProtocol.Trackable.AngularAcceleration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // float z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RTLSProtocol.Trackable.AngularAcceleration)
  return target;
}

size_t Trackable_AngularAcceleration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RTLSProtocol.Trackable.AngularAcceleration)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  // float z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Trackable_AngularAcceleration::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RTLSProtocol.Trackable.AngularAcceleration)
  GOOGLE_DCHECK_NE(&from, this);
  const Trackable_AngularAcceleration* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Trackable_AngularAcceleration>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RTLSProtocol.Trackable.AngularAcceleration)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RTLSProtocol.Trackable.AngularAcceleration)
    MergeFrom(*source);
  }
}

void Trackable_AngularAcceleration::MergeFrom(const Trackable_AngularAcceleration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RTLSProtocol.Trackable.AngularAcceleration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from.z() <= 0 && from.z() >= 0)) {
    _internal_set_z(from._internal_z());
  }
}

void Trackable_AngularAcceleration::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RTLSProtocol.Trackable.AngularAcceleration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Trackable_AngularAcceleration::CopyFrom(const Trackable_AngularAcceleration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RTLSProtocol.Trackable.AngularAcceleration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Trackable_AngularAcceleration::IsInitialized() const {
  return true;
}

void Trackable_AngularAcceleration::InternalSwap(Trackable_AngularAcceleration* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Trackable_AngularAcceleration::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Trackable::InitAsDefaultInstance() {
  ::RTLSProtocol::_Trackable_default_instance_._instance.get_mutable()->position_ = const_cast< ::RTLSProtocol::Trackable_Position*>(
      ::RTLSProtocol::Trackable_Position::internal_default_instance());
  ::RTLSProtocol::_Trackable_default_instance_._instance.get_mutable()->orientation_ = const_cast< ::RTLSProtocol::Trackable_Orientation*>(
      ::RTLSProtocol::Trackable_Orientation::internal_default_instance());
  ::RTLSProtocol::_Trackable_default_instance_._instance.get_mutable()->velocity_ = const_cast< ::RTLSProtocol::Trackable_Velocity*>(
      ::RTLSProtocol::Trackable_Velocity::internal_default_instance());
  ::RTLSProtocol::_Trackable_default_instance_._instance.get_mutable()->acceleration_ = const_cast< ::RTLSProtocol::Trackable_Acceleration*>(
      ::RTLSProtocol::Trackable_Acceleration::internal_default_instance());
  ::RTLSProtocol::_Trackable_default_instance_._instance.get_mutable()->angular_velocity_ = const_cast< ::RTLSProtocol::Trackable_AngularVelocity*>(
      ::RTLSProtocol::Trackable_AngularVelocity::internal_default_instance());
  ::RTLSProtocol::_Trackable_default_instance_._instance.get_mutable()->angular_acceleration_ = const_cast< ::RTLSProtocol::Trackable_AngularAcceleration*>(
      ::RTLSProtocol::Trackable_AngularAcceleration::internal_default_instance());
}
class Trackable::_Internal {
 public:
  static const ::RTLSProtocol::Trackable_Position& position(const Trackable* msg);
  static const ::RTLSProtocol::Trackable_Orientation& orientation(const Trackable* msg);
  static const ::RTLSProtocol::Trackable_Velocity& velocity(const Trackable* msg);
  static const ::RTLSProtocol::Trackable_Acceleration& acceleration(const Trackable* msg);
  static const ::RTLSProtocol::Trackable_AngularVelocity& angular_velocity(const Trackable* msg);
  static const ::RTLSProtocol::Trackable_AngularAcceleration& angular_acceleration(const Trackable* msg);
};

const ::RTLSProtocol::Trackable_Position&
Trackable::_Internal::position(const Trackable* msg) {
  return *msg->position_;
}
const ::RTLSProtocol::Trackable_Orientation&
Trackable::_Internal::orientation(const Trackable* msg) {
  return *msg->orientation_;
}
const ::RTLSProtocol::Trackable_Velocity&
Trackable::_Internal::velocity(const Trackable* msg) {
  return *msg->velocity_;
}
const ::RTLSProtocol::Trackable_Acceleration&
Trackable::_Internal::acceleration(const Trackable* msg) {
  return *msg->acceleration_;
}
const ::RTLSProtocol::Trackable_AngularVelocity&
Trackable::_Internal::angular_velocity(const Trackable* msg) {
  return *msg->angular_velocity_;
}
const ::RTLSProtocol::Trackable_AngularAcceleration&
Trackable::_Internal::angular_acceleration(const Trackable* msg) {
  return *msg->angular_acceleration_;
}
Trackable::Trackable()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RTLSProtocol.Trackable)
}
Trackable::Trackable(const Trackable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      children_(from.children_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cuid().empty()) {
    cuid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cuid_);
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  context_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_context().empty()) {
    context_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.context_);
  }
  if (from._internal_has_position()) {
    position_ = new ::RTLSProtocol::Trackable_Position(*from.position_);
  } else {
    position_ = nullptr;
  }
  if (from._internal_has_orientation()) {
    orientation_ = new ::RTLSProtocol::Trackable_Orientation(*from.orientation_);
  } else {
    orientation_ = nullptr;
  }
  if (from._internal_has_velocity()) {
    velocity_ = new ::RTLSProtocol::Trackable_Velocity(*from.velocity_);
  } else {
    velocity_ = nullptr;
  }
  if (from._internal_has_acceleration()) {
    acceleration_ = new ::RTLSProtocol::Trackable_Acceleration(*from.acceleration_);
  } else {
    acceleration_ = nullptr;
  }
  if (from._internal_has_angular_velocity()) {
    angular_velocity_ = new ::RTLSProtocol::Trackable_AngularVelocity(*from.angular_velocity_);
  } else {
    angular_velocity_ = nullptr;
  }
  if (from._internal_has_angular_acceleration()) {
    angular_acceleration_ = new ::RTLSProtocol::Trackable_AngularAcceleration(*from.angular_acceleration_);
  } else {
    angular_acceleration_ = nullptr;
  }
  ::memcpy(&frame_id_, &from.frame_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&frame_id_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:RTLSProtocol.Trackable)
}

void Trackable::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Trackable_Trackable_2eproto.base);
  cuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  context_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&position_)) + sizeof(id_));
}

Trackable::~Trackable() {
  // @@protoc_insertion_point(destructor:RTLSProtocol.Trackable)
  SharedDtor();
}

void Trackable::SharedDtor() {
  cuid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  context_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete orientation_;
  if (this != internal_default_instance()) delete velocity_;
  if (this != internal_default_instance()) delete acceleration_;
  if (this != internal_default_instance()) delete angular_velocity_;
  if (this != internal_default_instance()) delete angular_acceleration_;
}

void Trackable::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Trackable& Trackable::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Trackable_Trackable_2eproto.base);
  return *internal_default_instance();
}


void Trackable::Clear() {
// @@protoc_insertion_point(message_clear_start:RTLSProtocol.Trackable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  children_.Clear();
  cuid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  context_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && orientation_ != nullptr) {
    delete orientation_;
  }
  orientation_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && velocity_ != nullptr) {
    delete velocity_;
  }
  velocity_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && acceleration_ != nullptr) {
    delete acceleration_;
  }
  acceleration_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && angular_velocity_ != nullptr) {
    delete angular_velocity_;
  }
  angular_velocity_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && angular_acceleration_ != nullptr) {
    delete angular_acceleration_;
  }
  angular_acceleration_ = nullptr;
  ::memset(&frame_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&frame_id_)) + sizeof(id_));
  _internal_metadata_.Clear();
}

const char* Trackable::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes cuid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_cuid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "RTLSProtocol.Trackable.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .RTLSProtocol.Trackable.Position position = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .RTLSProtocol.Trackable.Orientation orientation = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_orientation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .RTLSProtocol.Trackable.Velocity velocity = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_velocity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .RTLSProtocol.Trackable.Acceleration acceleration = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_acceleration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .RTLSProtocol.Trackable.AngularVelocity angular_velocity = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_angular_velocity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .RTLSProtocol.Trackable.AngularAcceleration angular_acceleration = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_angular_acceleration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 frame_ID = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          frame_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 timestamp = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes context = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_context();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .RTLSProtocol.Trackable children = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_children(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Trackable::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RTLSProtocol.Trackable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // bytes cuid = 2;
  if (this->cuid().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_cuid(), target);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "RTLSProtocol.Trackable.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // .RTLSProtocol.Trackable.Position position = 4;
  if (this->has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::position(this), target, stream);
  }

  // .RTLSProtocol.Trackable.Orientation orientation = 5;
  if (this->has_orientation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::orientation(this), target, stream);
  }

  // .RTLSProtocol.Trackable.Velocity velocity = 6;
  if (this->has_velocity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::velocity(this), target, stream);
  }

  // .RTLSProtocol.Trackable.Acceleration acceleration = 7;
  if (this->has_acceleration()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::acceleration(this), target, stream);
  }

  // .RTLSProtocol.Trackable.AngularVelocity angular_velocity = 8;
  if (this->has_angular_velocity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::angular_velocity(this), target, stream);
  }

  // .RTLSProtocol.Trackable.AngularAcceleration angular_acceleration = 9;
  if (this->has_angular_acceleration()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::angular_acceleration(this), target, stream);
  }

  // uint64 frame_ID = 10;
  if (this->frame_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(10, this->_internal_frame_id(), target);
  }

  // uint64 timestamp = 11;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(11, this->_internal_timestamp(), target);
  }

  // bytes context = 12;
  if (this->context().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        12, this->_internal_context(), target);
  }

  // repeated .RTLSProtocol.Trackable children = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_children_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, this->_internal_children(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RTLSProtocol.Trackable)
  return target;
}

size_t Trackable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RTLSProtocol.Trackable)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .RTLSProtocol.Trackable children = 13;
  total_size += 1UL * this->_internal_children_size();
  for (const auto& msg : this->children_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes cuid = 2;
  if (this->cuid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_cuid());
  }

  // string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // bytes context = 12;
  if (this->context().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_context());
  }

  // .RTLSProtocol.Trackable.Position position = 4;
  if (this->has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // .RTLSProtocol.Trackable.Orientation orientation = 5;
  if (this->has_orientation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *orientation_);
  }

  // .RTLSProtocol.Trackable.Velocity velocity = 6;
  if (this->has_velocity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *velocity_);
  }

  // .RTLSProtocol.Trackable.Acceleration acceleration = 7;
  if (this->has_acceleration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *acceleration_);
  }

  // .RTLSProtocol.Trackable.AngularVelocity angular_velocity = 8;
  if (this->has_angular_velocity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *angular_velocity_);
  }

  // .RTLSProtocol.Trackable.AngularAcceleration angular_acceleration = 9;
  if (this->has_angular_acceleration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *angular_acceleration_);
  }

  // uint64 frame_ID = 10;
  if (this->frame_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_frame_id());
  }

  // uint64 timestamp = 11;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_timestamp());
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Trackable::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RTLSProtocol.Trackable)
  GOOGLE_DCHECK_NE(&from, this);
  const Trackable* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Trackable>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RTLSProtocol.Trackable)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RTLSProtocol.Trackable)
    MergeFrom(*source);
  }
}

void Trackable::MergeFrom(const Trackable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RTLSProtocol.Trackable)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  children_.MergeFrom(from.children_);
  if (from.cuid().size() > 0) {

    cuid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cuid_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.context().size() > 0) {

    context_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.context_);
  }
  if (from.has_position()) {
    _internal_mutable_position()->::RTLSProtocol::Trackable_Position::MergeFrom(from._internal_position());
  }
  if (from.has_orientation()) {
    _internal_mutable_orientation()->::RTLSProtocol::Trackable_Orientation::MergeFrom(from._internal_orientation());
  }
  if (from.has_velocity()) {
    _internal_mutable_velocity()->::RTLSProtocol::Trackable_Velocity::MergeFrom(from._internal_velocity());
  }
  if (from.has_acceleration()) {
    _internal_mutable_acceleration()->::RTLSProtocol::Trackable_Acceleration::MergeFrom(from._internal_acceleration());
  }
  if (from.has_angular_velocity()) {
    _internal_mutable_angular_velocity()->::RTLSProtocol::Trackable_AngularVelocity::MergeFrom(from._internal_angular_velocity());
  }
  if (from.has_angular_acceleration()) {
    _internal_mutable_angular_acceleration()->::RTLSProtocol::Trackable_AngularAcceleration::MergeFrom(from._internal_angular_acceleration());
  }
  if (from.frame_id() != 0) {
    _internal_set_frame_id(from._internal_frame_id());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void Trackable::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RTLSProtocol.Trackable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Trackable::CopyFrom(const Trackable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RTLSProtocol.Trackable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Trackable::IsInitialized() const {
  return true;
}

void Trackable::InternalSwap(Trackable* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  children_.InternalSwap(&other->children_);
  cuid_.Swap(&other->cuid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  context_.Swap(&other->context_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(position_, other->position_);
  swap(orientation_, other->orientation_);
  swap(velocity_, other->velocity_);
  swap(acceleration_, other->acceleration_);
  swap(angular_velocity_, other->angular_velocity_);
  swap(angular_acceleration_, other->angular_acceleration_);
  swap(frame_id_, other->frame_id_);
  swap(timestamp_, other->timestamp_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Trackable::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrackableFrame::InitAsDefaultInstance() {
}
class TrackableFrame::_Internal {
 public:
};

TrackableFrame::TrackableFrame()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RTLSProtocol.TrackableFrame)
}
TrackableFrame::TrackableFrame(const TrackableFrame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      trackables_(from.trackables_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  context_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_context().empty()) {
    context_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.context_);
  }
  ::memcpy(&frame_id_, &from.frame_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&frame_id_)) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:RTLSProtocol.TrackableFrame)
}

void TrackableFrame::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrackableFrame_Trackable_2eproto.base);
  context_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&frame_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&frame_id_)) + sizeof(timestamp_));
}

TrackableFrame::~TrackableFrame() {
  // @@protoc_insertion_point(destructor:RTLSProtocol.TrackableFrame)
  SharedDtor();
}

void TrackableFrame::SharedDtor() {
  context_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TrackableFrame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrackableFrame& TrackableFrame::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrackableFrame_Trackable_2eproto.base);
  return *internal_default_instance();
}


void TrackableFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:RTLSProtocol.TrackableFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trackables_.Clear();
  context_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&frame_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&frame_id_)) + sizeof(timestamp_));
  _internal_metadata_.Clear();
}

const char* TrackableFrame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 frame_ID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          frame_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .RTLSProtocol.Trackable trackables = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_trackables(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // bytes context = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_context();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrackableFrame::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RTLSProtocol.TrackableFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 frame_ID = 1;
  if (this->frame_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_frame_id(), target);
  }

  // uint64 timestamp = 2;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_timestamp(), target);
  }

  // repeated .RTLSProtocol.Trackable trackables = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_trackables_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_trackables(i), target, stream);
  }

  // bytes context = 4;
  if (this->context().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_context(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RTLSProtocol.TrackableFrame)
  return target;
}

size_t TrackableFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RTLSProtocol.TrackableFrame)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .RTLSProtocol.Trackable trackables = 3;
  total_size += 1UL * this->_internal_trackables_size();
  for (const auto& msg : this->trackables_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes context = 4;
  if (this->context().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_context());
  }

  // uint64 frame_ID = 1;
  if (this->frame_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_frame_id());
  }

  // uint64 timestamp = 2;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrackableFrame::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RTLSProtocol.TrackableFrame)
  GOOGLE_DCHECK_NE(&from, this);
  const TrackableFrame* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrackableFrame>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RTLSProtocol.TrackableFrame)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RTLSProtocol.TrackableFrame)
    MergeFrom(*source);
  }
}

void TrackableFrame::MergeFrom(const TrackableFrame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RTLSProtocol.TrackableFrame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  trackables_.MergeFrom(from.trackables_);
  if (from.context().size() > 0) {

    context_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.context_);
  }
  if (from.frame_id() != 0) {
    _internal_set_frame_id(from._internal_frame_id());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
}

void TrackableFrame::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RTLSProtocol.TrackableFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrackableFrame::CopyFrom(const TrackableFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RTLSProtocol.TrackableFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackableFrame::IsInitialized() const {
  return true;
}

void TrackableFrame::InternalSwap(TrackableFrame* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  trackables_.InternalSwap(&other->trackables_);
  context_.Swap(&other->context_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(frame_id_, other->frame_id_);
  swap(timestamp_, other->timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrackableFrame::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace RTLSProtocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::RTLSProtocol::Trackable_Position* Arena::CreateMaybeMessage< ::RTLSProtocol::Trackable_Position >(Arena* arena) {
  return Arena::CreateInternal< ::RTLSProtocol::Trackable_Position >(arena);
}
template<> PROTOBUF_NOINLINE ::RTLSProtocol::Trackable_Orientation* Arena::CreateMaybeMessage< ::RTLSProtocol::Trackable_Orientation >(Arena* arena) {
  return Arena::CreateInternal< ::RTLSProtocol::Trackable_Orientation >(arena);
}
template<> PROTOBUF_NOINLINE ::RTLSProtocol::Trackable_Velocity* Arena::CreateMaybeMessage< ::RTLSProtocol::Trackable_Velocity >(Arena* arena) {
  return Arena::CreateInternal< ::RTLSProtocol::Trackable_Velocity >(arena);
}
template<> PROTOBUF_NOINLINE ::RTLSProtocol::Trackable_Acceleration* Arena::CreateMaybeMessage< ::RTLSProtocol::Trackable_Acceleration >(Arena* arena) {
  return Arena::CreateInternal< ::RTLSProtocol::Trackable_Acceleration >(arena);
}
template<> PROTOBUF_NOINLINE ::RTLSProtocol::Trackable_AngularVelocity* Arena::CreateMaybeMessage< ::RTLSProtocol::Trackable_AngularVelocity >(Arena* arena) {
  return Arena::CreateInternal< ::RTLSProtocol::Trackable_AngularVelocity >(arena);
}
template<> PROTOBUF_NOINLINE ::RTLSProtocol::Trackable_AngularAcceleration* Arena::CreateMaybeMessage< ::RTLSProtocol::Trackable_AngularAcceleration >(Arena* arena) {
  return Arena::CreateInternal< ::RTLSProtocol::Trackable_AngularAcceleration >(arena);
}
template<> PROTOBUF_NOINLINE ::RTLSProtocol::Trackable* Arena::CreateMaybeMessage< ::RTLSProtocol::Trackable >(Arena* arena) {
  return Arena::CreateInternal< ::RTLSProtocol::Trackable >(arena);
}
template<> PROTOBUF_NOINLINE ::RTLSProtocol::TrackableFrame* Arena::CreateMaybeMessage< ::RTLSProtocol::TrackableFrame >(Arena* arena) {
  return Arena::CreateInternal< ::RTLSProtocol::TrackableFrame >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
