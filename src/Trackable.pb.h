// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Trackable.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Trackable_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Trackable_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Trackable_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Trackable_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Trackable_2eproto;
namespace RTLSProtocol {
class Trackable;
class TrackableDefaultTypeInternal;
extern TrackableDefaultTypeInternal _Trackable_default_instance_;
class TrackableFrame;
class TrackableFrameDefaultTypeInternal;
extern TrackableFrameDefaultTypeInternal _TrackableFrame_default_instance_;
class Trackable_Acceleration;
class Trackable_AccelerationDefaultTypeInternal;
extern Trackable_AccelerationDefaultTypeInternal _Trackable_Acceleration_default_instance_;
class Trackable_AngularAcceleration;
class Trackable_AngularAccelerationDefaultTypeInternal;
extern Trackable_AngularAccelerationDefaultTypeInternal _Trackable_AngularAcceleration_default_instance_;
class Trackable_AngularVelocity;
class Trackable_AngularVelocityDefaultTypeInternal;
extern Trackable_AngularVelocityDefaultTypeInternal _Trackable_AngularVelocity_default_instance_;
class Trackable_Orientation;
class Trackable_OrientationDefaultTypeInternal;
extern Trackable_OrientationDefaultTypeInternal _Trackable_Orientation_default_instance_;
class Trackable_Position;
class Trackable_PositionDefaultTypeInternal;
extern Trackable_PositionDefaultTypeInternal _Trackable_Position_default_instance_;
class Trackable_Velocity;
class Trackable_VelocityDefaultTypeInternal;
extern Trackable_VelocityDefaultTypeInternal _Trackable_Velocity_default_instance_;
}  // namespace RTLSProtocol
PROTOBUF_NAMESPACE_OPEN
template<> ::RTLSProtocol::Trackable* Arena::CreateMaybeMessage<::RTLSProtocol::Trackable>(Arena*);
template<> ::RTLSProtocol::TrackableFrame* Arena::CreateMaybeMessage<::RTLSProtocol::TrackableFrame>(Arena*);
template<> ::RTLSProtocol::Trackable_Acceleration* Arena::CreateMaybeMessage<::RTLSProtocol::Trackable_Acceleration>(Arena*);
template<> ::RTLSProtocol::Trackable_AngularAcceleration* Arena::CreateMaybeMessage<::RTLSProtocol::Trackable_AngularAcceleration>(Arena*);
template<> ::RTLSProtocol::Trackable_AngularVelocity* Arena::CreateMaybeMessage<::RTLSProtocol::Trackable_AngularVelocity>(Arena*);
template<> ::RTLSProtocol::Trackable_Orientation* Arena::CreateMaybeMessage<::RTLSProtocol::Trackable_Orientation>(Arena*);
template<> ::RTLSProtocol::Trackable_Position* Arena::CreateMaybeMessage<::RTLSProtocol::Trackable_Position>(Arena*);
template<> ::RTLSProtocol::Trackable_Velocity* Arena::CreateMaybeMessage<::RTLSProtocol::Trackable_Velocity>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace RTLSProtocol {

// ===================================================================

class Trackable_Position :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RTLSProtocol.Trackable.Position) */ {
 public:
  Trackable_Position();
  virtual ~Trackable_Position();

  Trackable_Position(const Trackable_Position& from);
  Trackable_Position(Trackable_Position&& from) noexcept
    : Trackable_Position() {
    *this = ::std::move(from);
  }

  inline Trackable_Position& operator=(const Trackable_Position& from) {
    CopyFrom(from);
    return *this;
  }
  inline Trackable_Position& operator=(Trackable_Position&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Trackable_Position& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Trackable_Position* internal_default_instance() {
    return reinterpret_cast<const Trackable_Position*>(
               &_Trackable_Position_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Trackable_Position& a, Trackable_Position& b) {
    a.Swap(&b);
  }
  inline void Swap(Trackable_Position* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Trackable_Position* New() const final {
    return CreateMaybeMessage<Trackable_Position>(nullptr);
  }

  Trackable_Position* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Trackable_Position>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Trackable_Position& from);
  void MergeFrom(const Trackable_Position& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Trackable_Position* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RTLSProtocol.Trackable.Position";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Trackable_2eproto);
    return ::descriptor_table_Trackable_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // double x = 1;
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // double y = 2;
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // double z = 3;
  void clear_z();
  double z() const;
  void set_z(double value);
  private:
  double _internal_z() const;
  void _internal_set_z(double value);
  public:

  // @@protoc_insertion_point(class_scope:RTLSProtocol.Trackable.Position)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  double x_;
  double y_;
  double z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Trackable_2eproto;
};
// -------------------------------------------------------------------

class Trackable_Orientation :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RTLSProtocol.Trackable.Orientation) */ {
 public:
  Trackable_Orientation();
  virtual ~Trackable_Orientation();

  Trackable_Orientation(const Trackable_Orientation& from);
  Trackable_Orientation(Trackable_Orientation&& from) noexcept
    : Trackable_Orientation() {
    *this = ::std::move(from);
  }

  inline Trackable_Orientation& operator=(const Trackable_Orientation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Trackable_Orientation& operator=(Trackable_Orientation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Trackable_Orientation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Trackable_Orientation* internal_default_instance() {
    return reinterpret_cast<const Trackable_Orientation*>(
               &_Trackable_Orientation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Trackable_Orientation& a, Trackable_Orientation& b) {
    a.Swap(&b);
  }
  inline void Swap(Trackable_Orientation* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Trackable_Orientation* New() const final {
    return CreateMaybeMessage<Trackable_Orientation>(nullptr);
  }

  Trackable_Orientation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Trackable_Orientation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Trackable_Orientation& from);
  void MergeFrom(const Trackable_Orientation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Trackable_Orientation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RTLSProtocol.Trackable.Orientation";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Trackable_2eproto);
    return ::descriptor_table_Trackable_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
    kWFieldNumber = 4,
  };
  // double x = 1;
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // double y = 2;
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // double z = 3;
  void clear_z();
  double z() const;
  void set_z(double value);
  private:
  double _internal_z() const;
  void _internal_set_z(double value);
  public:

  // double w = 4;
  void clear_w();
  double w() const;
  void set_w(double value);
  private:
  double _internal_w() const;
  void _internal_set_w(double value);
  public:

  // @@protoc_insertion_point(class_scope:RTLSProtocol.Trackable.Orientation)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  double x_;
  double y_;
  double z_;
  double w_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Trackable_2eproto;
};
// -------------------------------------------------------------------

class Trackable_Velocity :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RTLSProtocol.Trackable.Velocity) */ {
 public:
  Trackable_Velocity();
  virtual ~Trackable_Velocity();

  Trackable_Velocity(const Trackable_Velocity& from);
  Trackable_Velocity(Trackable_Velocity&& from) noexcept
    : Trackable_Velocity() {
    *this = ::std::move(from);
  }

  inline Trackable_Velocity& operator=(const Trackable_Velocity& from) {
    CopyFrom(from);
    return *this;
  }
  inline Trackable_Velocity& operator=(Trackable_Velocity&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Trackable_Velocity& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Trackable_Velocity* internal_default_instance() {
    return reinterpret_cast<const Trackable_Velocity*>(
               &_Trackable_Velocity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Trackable_Velocity& a, Trackable_Velocity& b) {
    a.Swap(&b);
  }
  inline void Swap(Trackable_Velocity* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Trackable_Velocity* New() const final {
    return CreateMaybeMessage<Trackable_Velocity>(nullptr);
  }

  Trackable_Velocity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Trackable_Velocity>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Trackable_Velocity& from);
  void MergeFrom(const Trackable_Velocity& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Trackable_Velocity* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RTLSProtocol.Trackable.Velocity";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Trackable_2eproto);
    return ::descriptor_table_Trackable_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:RTLSProtocol.Trackable.Velocity)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float x_;
  float y_;
  float z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Trackable_2eproto;
};
// -------------------------------------------------------------------

class Trackable_Acceleration :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RTLSProtocol.Trackable.Acceleration) */ {
 public:
  Trackable_Acceleration();
  virtual ~Trackable_Acceleration();

  Trackable_Acceleration(const Trackable_Acceleration& from);
  Trackable_Acceleration(Trackable_Acceleration&& from) noexcept
    : Trackable_Acceleration() {
    *this = ::std::move(from);
  }

  inline Trackable_Acceleration& operator=(const Trackable_Acceleration& from) {
    CopyFrom(from);
    return *this;
  }
  inline Trackable_Acceleration& operator=(Trackable_Acceleration&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Trackable_Acceleration& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Trackable_Acceleration* internal_default_instance() {
    return reinterpret_cast<const Trackable_Acceleration*>(
               &_Trackable_Acceleration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Trackable_Acceleration& a, Trackable_Acceleration& b) {
    a.Swap(&b);
  }
  inline void Swap(Trackable_Acceleration* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Trackable_Acceleration* New() const final {
    return CreateMaybeMessage<Trackable_Acceleration>(nullptr);
  }

  Trackable_Acceleration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Trackable_Acceleration>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Trackable_Acceleration& from);
  void MergeFrom(const Trackable_Acceleration& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Trackable_Acceleration* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RTLSProtocol.Trackable.Acceleration";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Trackable_2eproto);
    return ::descriptor_table_Trackable_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:RTLSProtocol.Trackable.Acceleration)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float x_;
  float y_;
  float z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Trackable_2eproto;
};
// -------------------------------------------------------------------

class Trackable_AngularVelocity :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RTLSProtocol.Trackable.AngularVelocity) */ {
 public:
  Trackable_AngularVelocity();
  virtual ~Trackable_AngularVelocity();

  Trackable_AngularVelocity(const Trackable_AngularVelocity& from);
  Trackable_AngularVelocity(Trackable_AngularVelocity&& from) noexcept
    : Trackable_AngularVelocity() {
    *this = ::std::move(from);
  }

  inline Trackable_AngularVelocity& operator=(const Trackable_AngularVelocity& from) {
    CopyFrom(from);
    return *this;
  }
  inline Trackable_AngularVelocity& operator=(Trackable_AngularVelocity&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Trackable_AngularVelocity& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Trackable_AngularVelocity* internal_default_instance() {
    return reinterpret_cast<const Trackable_AngularVelocity*>(
               &_Trackable_AngularVelocity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Trackable_AngularVelocity& a, Trackable_AngularVelocity& b) {
    a.Swap(&b);
  }
  inline void Swap(Trackable_AngularVelocity* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Trackable_AngularVelocity* New() const final {
    return CreateMaybeMessage<Trackable_AngularVelocity>(nullptr);
  }

  Trackable_AngularVelocity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Trackable_AngularVelocity>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Trackable_AngularVelocity& from);
  void MergeFrom(const Trackable_AngularVelocity& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Trackable_AngularVelocity* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RTLSProtocol.Trackable.AngularVelocity";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Trackable_2eproto);
    return ::descriptor_table_Trackable_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:RTLSProtocol.Trackable.AngularVelocity)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float x_;
  float y_;
  float z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Trackable_2eproto;
};
// -------------------------------------------------------------------

class Trackable_AngularAcceleration :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RTLSProtocol.Trackable.AngularAcceleration) */ {
 public:
  Trackable_AngularAcceleration();
  virtual ~Trackable_AngularAcceleration();

  Trackable_AngularAcceleration(const Trackable_AngularAcceleration& from);
  Trackable_AngularAcceleration(Trackable_AngularAcceleration&& from) noexcept
    : Trackable_AngularAcceleration() {
    *this = ::std::move(from);
  }

  inline Trackable_AngularAcceleration& operator=(const Trackable_AngularAcceleration& from) {
    CopyFrom(from);
    return *this;
  }
  inline Trackable_AngularAcceleration& operator=(Trackable_AngularAcceleration&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Trackable_AngularAcceleration& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Trackable_AngularAcceleration* internal_default_instance() {
    return reinterpret_cast<const Trackable_AngularAcceleration*>(
               &_Trackable_AngularAcceleration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Trackable_AngularAcceleration& a, Trackable_AngularAcceleration& b) {
    a.Swap(&b);
  }
  inline void Swap(Trackable_AngularAcceleration* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Trackable_AngularAcceleration* New() const final {
    return CreateMaybeMessage<Trackable_AngularAcceleration>(nullptr);
  }

  Trackable_AngularAcceleration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Trackable_AngularAcceleration>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Trackable_AngularAcceleration& from);
  void MergeFrom(const Trackable_AngularAcceleration& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Trackable_AngularAcceleration* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RTLSProtocol.Trackable.AngularAcceleration";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Trackable_2eproto);
    return ::descriptor_table_Trackable_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:RTLSProtocol.Trackable.AngularAcceleration)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float x_;
  float y_;
  float z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Trackable_2eproto;
};
// -------------------------------------------------------------------

class Trackable :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RTLSProtocol.Trackable) */ {
 public:
  Trackable();
  virtual ~Trackable();

  Trackable(const Trackable& from);
  Trackable(Trackable&& from) noexcept
    : Trackable() {
    *this = ::std::move(from);
  }

  inline Trackable& operator=(const Trackable& from) {
    CopyFrom(from);
    return *this;
  }
  inline Trackable& operator=(Trackable&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Trackable& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Trackable* internal_default_instance() {
    return reinterpret_cast<const Trackable*>(
               &_Trackable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Trackable& a, Trackable& b) {
    a.Swap(&b);
  }
  inline void Swap(Trackable* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Trackable* New() const final {
    return CreateMaybeMessage<Trackable>(nullptr);
  }

  Trackable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Trackable>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Trackable& from);
  void MergeFrom(const Trackable& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Trackable* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RTLSProtocol.Trackable";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Trackable_2eproto);
    return ::descriptor_table_Trackable_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Trackable_Position Position;
  typedef Trackable_Orientation Orientation;
  typedef Trackable_Velocity Velocity;
  typedef Trackable_Acceleration Acceleration;
  typedef Trackable_AngularVelocity AngularVelocity;
  typedef Trackable_AngularAcceleration AngularAcceleration;

  // accessors -------------------------------------------------------

  enum : int {
    kChildrenFieldNumber = 13,
    kCuidFieldNumber = 2,
    kNameFieldNumber = 3,
    kContextFieldNumber = 12,
    kPositionFieldNumber = 4,
    kOrientationFieldNumber = 5,
    kVelocityFieldNumber = 6,
    kAccelerationFieldNumber = 7,
    kAngularVelocityFieldNumber = 8,
    kAngularAccelerationFieldNumber = 9,
    kFrameIDFieldNumber = 10,
    kTimestampFieldNumber = 11,
    kIdFieldNumber = 1,
  };
  // repeated .RTLSProtocol.Trackable children = 13;
  int children_size() const;
  private:
  int _internal_children_size() const;
  public:
  void clear_children();
  ::RTLSProtocol::Trackable* mutable_children(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RTLSProtocol::Trackable >*
      mutable_children();
  private:
  const ::RTLSProtocol::Trackable& _internal_children(int index) const;
  ::RTLSProtocol::Trackable* _internal_add_children();
  public:
  const ::RTLSProtocol::Trackable& children(int index) const;
  ::RTLSProtocol::Trackable* add_children();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RTLSProtocol::Trackable >&
      children() const;

  // bytes cuid = 2;
  void clear_cuid();
  const std::string& cuid() const;
  void set_cuid(const std::string& value);
  void set_cuid(std::string&& value);
  void set_cuid(const char* value);
  void set_cuid(const void* value, size_t size);
  std::string* mutable_cuid();
  std::string* release_cuid();
  void set_allocated_cuid(std::string* cuid);
  private:
  const std::string& _internal_cuid() const;
  void _internal_set_cuid(const std::string& value);
  std::string* _internal_mutable_cuid();
  public:

  // string name = 3;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bytes context = 12;
  void clear_context();
  const std::string& context() const;
  void set_context(const std::string& value);
  void set_context(std::string&& value);
  void set_context(const char* value);
  void set_context(const void* value, size_t size);
  std::string* mutable_context();
  std::string* release_context();
  void set_allocated_context(std::string* context);
  private:
  const std::string& _internal_context() const;
  void _internal_set_context(const std::string& value);
  std::string* _internal_mutable_context();
  public:

  // .RTLSProtocol.Trackable.Position position = 4;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::RTLSProtocol::Trackable_Position& position() const;
  ::RTLSProtocol::Trackable_Position* release_position();
  ::RTLSProtocol::Trackable_Position* mutable_position();
  void set_allocated_position(::RTLSProtocol::Trackable_Position* position);
  private:
  const ::RTLSProtocol::Trackable_Position& _internal_position() const;
  ::RTLSProtocol::Trackable_Position* _internal_mutable_position();
  public:

  // .RTLSProtocol.Trackable.Orientation orientation = 5;
  bool has_orientation() const;
  private:
  bool _internal_has_orientation() const;
  public:
  void clear_orientation();
  const ::RTLSProtocol::Trackable_Orientation& orientation() const;
  ::RTLSProtocol::Trackable_Orientation* release_orientation();
  ::RTLSProtocol::Trackable_Orientation* mutable_orientation();
  void set_allocated_orientation(::RTLSProtocol::Trackable_Orientation* orientation);
  private:
  const ::RTLSProtocol::Trackable_Orientation& _internal_orientation() const;
  ::RTLSProtocol::Trackable_Orientation* _internal_mutable_orientation();
  public:

  // .RTLSProtocol.Trackable.Velocity velocity = 6;
  bool has_velocity() const;
  private:
  bool _internal_has_velocity() const;
  public:
  void clear_velocity();
  const ::RTLSProtocol::Trackable_Velocity& velocity() const;
  ::RTLSProtocol::Trackable_Velocity* release_velocity();
  ::RTLSProtocol::Trackable_Velocity* mutable_velocity();
  void set_allocated_velocity(::RTLSProtocol::Trackable_Velocity* velocity);
  private:
  const ::RTLSProtocol::Trackable_Velocity& _internal_velocity() const;
  ::RTLSProtocol::Trackable_Velocity* _internal_mutable_velocity();
  public:

  // .RTLSProtocol.Trackable.Acceleration acceleration = 7;
  bool has_acceleration() const;
  private:
  bool _internal_has_acceleration() const;
  public:
  void clear_acceleration();
  const ::RTLSProtocol::Trackable_Acceleration& acceleration() const;
  ::RTLSProtocol::Trackable_Acceleration* release_acceleration();
  ::RTLSProtocol::Trackable_Acceleration* mutable_acceleration();
  void set_allocated_acceleration(::RTLSProtocol::Trackable_Acceleration* acceleration);
  private:
  const ::RTLSProtocol::Trackable_Acceleration& _internal_acceleration() const;
  ::RTLSProtocol::Trackable_Acceleration* _internal_mutable_acceleration();
  public:

  // .RTLSProtocol.Trackable.AngularVelocity angular_velocity = 8;
  bool has_angular_velocity() const;
  private:
  bool _internal_has_angular_velocity() const;
  public:
  void clear_angular_velocity();
  const ::RTLSProtocol::Trackable_AngularVelocity& angular_velocity() const;
  ::RTLSProtocol::Trackable_AngularVelocity* release_angular_velocity();
  ::RTLSProtocol::Trackable_AngularVelocity* mutable_angular_velocity();
  void set_allocated_angular_velocity(::RTLSProtocol::Trackable_AngularVelocity* angular_velocity);
  private:
  const ::RTLSProtocol::Trackable_AngularVelocity& _internal_angular_velocity() const;
  ::RTLSProtocol::Trackable_AngularVelocity* _internal_mutable_angular_velocity();
  public:

  // .RTLSProtocol.Trackable.AngularAcceleration angular_acceleration = 9;
  bool has_angular_acceleration() const;
  private:
  bool _internal_has_angular_acceleration() const;
  public:
  void clear_angular_acceleration();
  const ::RTLSProtocol::Trackable_AngularAcceleration& angular_acceleration() const;
  ::RTLSProtocol::Trackable_AngularAcceleration* release_angular_acceleration();
  ::RTLSProtocol::Trackable_AngularAcceleration* mutable_angular_acceleration();
  void set_allocated_angular_acceleration(::RTLSProtocol::Trackable_AngularAcceleration* angular_acceleration);
  private:
  const ::RTLSProtocol::Trackable_AngularAcceleration& _internal_angular_acceleration() const;
  ::RTLSProtocol::Trackable_AngularAcceleration* _internal_mutable_angular_acceleration();
  public:

  // uint64 frame_ID = 10;
  void clear_frame_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 frame_id() const;
  void set_frame_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_frame_id() const;
  void _internal_set_frame_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 timestamp = 11;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:RTLSProtocol.Trackable)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RTLSProtocol::Trackable > children_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cuid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr context_;
  ::RTLSProtocol::Trackable_Position* position_;
  ::RTLSProtocol::Trackable_Orientation* orientation_;
  ::RTLSProtocol::Trackable_Velocity* velocity_;
  ::RTLSProtocol::Trackable_Acceleration* acceleration_;
  ::RTLSProtocol::Trackable_AngularVelocity* angular_velocity_;
  ::RTLSProtocol::Trackable_AngularAcceleration* angular_acceleration_;
  ::PROTOBUF_NAMESPACE_ID::uint64 frame_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Trackable_2eproto;
};
// -------------------------------------------------------------------

class TrackableFrame :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RTLSProtocol.TrackableFrame) */ {
 public:
  TrackableFrame();
  virtual ~TrackableFrame();

  TrackableFrame(const TrackableFrame& from);
  TrackableFrame(TrackableFrame&& from) noexcept
    : TrackableFrame() {
    *this = ::std::move(from);
  }

  inline TrackableFrame& operator=(const TrackableFrame& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrackableFrame& operator=(TrackableFrame&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrackableFrame& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrackableFrame* internal_default_instance() {
    return reinterpret_cast<const TrackableFrame*>(
               &_TrackableFrame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(TrackableFrame& a, TrackableFrame& b) {
    a.Swap(&b);
  }
  inline void Swap(TrackableFrame* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrackableFrame* New() const final {
    return CreateMaybeMessage<TrackableFrame>(nullptr);
  }

  TrackableFrame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrackableFrame>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrackableFrame& from);
  void MergeFrom(const TrackableFrame& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrackableFrame* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RTLSProtocol.TrackableFrame";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Trackable_2eproto);
    return ::descriptor_table_Trackable_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTrackablesFieldNumber = 3,
    kContextFieldNumber = 4,
    kFrameIDFieldNumber = 1,
    kTimestampFieldNumber = 2,
  };
  // repeated .RTLSProtocol.Trackable trackables = 3;
  int trackables_size() const;
  private:
  int _internal_trackables_size() const;
  public:
  void clear_trackables();
  ::RTLSProtocol::Trackable* mutable_trackables(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RTLSProtocol::Trackable >*
      mutable_trackables();
  private:
  const ::RTLSProtocol::Trackable& _internal_trackables(int index) const;
  ::RTLSProtocol::Trackable* _internal_add_trackables();
  public:
  const ::RTLSProtocol::Trackable& trackables(int index) const;
  ::RTLSProtocol::Trackable* add_trackables();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RTLSProtocol::Trackable >&
      trackables() const;

  // bytes context = 4;
  void clear_context();
  const std::string& context() const;
  void set_context(const std::string& value);
  void set_context(std::string&& value);
  void set_context(const char* value);
  void set_context(const void* value, size_t size);
  std::string* mutable_context();
  std::string* release_context();
  void set_allocated_context(std::string* context);
  private:
  const std::string& _internal_context() const;
  void _internal_set_context(const std::string& value);
  std::string* _internal_mutable_context();
  public:

  // uint64 frame_ID = 1;
  void clear_frame_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 frame_id() const;
  void set_frame_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_frame_id() const;
  void _internal_set_frame_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 timestamp = 2;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:RTLSProtocol.TrackableFrame)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RTLSProtocol::Trackable > trackables_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr context_;
  ::PROTOBUF_NAMESPACE_ID::uint64 frame_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Trackable_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Trackable_Position

// double x = 1;
inline void Trackable_Position::clear_x() {
  x_ = 0;
}
inline double Trackable_Position::_internal_x() const {
  return x_;
}
inline double Trackable_Position::x() const {
  // @@protoc_insertion_point(field_get:RTLSProtocol.Trackable.Position.x)
  return _internal_x();
}
inline void Trackable_Position::_internal_set_x(double value) {
  
  x_ = value;
}
inline void Trackable_Position::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:RTLSProtocol.Trackable.Position.x)
}

// double y = 2;
inline void Trackable_Position::clear_y() {
  y_ = 0;
}
inline double Trackable_Position::_internal_y() const {
  return y_;
}
inline double Trackable_Position::y() const {
  // @@protoc_insertion_point(field_get:RTLSProtocol.Trackable.Position.y)
  return _internal_y();
}
inline void Trackable_Position::_internal_set_y(double value) {
  
  y_ = value;
}
inline void Trackable_Position::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:RTLSProtocol.Trackable.Position.y)
}

// double z = 3;
inline void Trackable_Position::clear_z() {
  z_ = 0;
}
inline double Trackable_Position::_internal_z() const {
  return z_;
}
inline double Trackable_Position::z() const {
  // @@protoc_insertion_point(field_get:RTLSProtocol.Trackable.Position.z)
  return _internal_z();
}
inline void Trackable_Position::_internal_set_z(double value) {
  
  z_ = value;
}
inline void Trackable_Position::set_z(double value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:RTLSProtocol.Trackable.Position.z)
}

// -------------------------------------------------------------------

// Trackable_Orientation

// double x = 1;
inline void Trackable_Orientation::clear_x() {
  x_ = 0;
}
inline double Trackable_Orientation::_internal_x() const {
  return x_;
}
inline double Trackable_Orientation::x() const {
  // @@protoc_insertion_point(field_get:RTLSProtocol.Trackable.Orientation.x)
  return _internal_x();
}
inline void Trackable_Orientation::_internal_set_x(double value) {
  
  x_ = value;
}
inline void Trackable_Orientation::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:RTLSProtocol.Trackable.Orientation.x)
}

// double y = 2;
inline void Trackable_Orientation::clear_y() {
  y_ = 0;
}
inline double Trackable_Orientation::_internal_y() const {
  return y_;
}
inline double Trackable_Orientation::y() const {
  // @@protoc_insertion_point(field_get:RTLSProtocol.Trackable.Orientation.y)
  return _internal_y();
}
inline void Trackable_Orientation::_internal_set_y(double value) {
  
  y_ = value;
}
inline void Trackable_Orientation::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:RTLSProtocol.Trackable.Orientation.y)
}

// double z = 3;
inline void Trackable_Orientation::clear_z() {
  z_ = 0;
}
inline double Trackable_Orientation::_internal_z() const {
  return z_;
}
inline double Trackable_Orientation::z() const {
  // @@protoc_insertion_point(field_get:RTLSProtocol.Trackable.Orientation.z)
  return _internal_z();
}
inline void Trackable_Orientation::_internal_set_z(double value) {
  
  z_ = value;
}
inline void Trackable_Orientation::set_z(double value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:RTLSProtocol.Trackable.Orientation.z)
}

// double w = 4;
inline void Trackable_Orientation::clear_w() {
  w_ = 0;
}
inline double Trackable_Orientation::_internal_w() const {
  return w_;
}
inline double Trackable_Orientation::w() const {
  // @@protoc_insertion_point(field_get:RTLSProtocol.Trackable.Orientation.w)
  return _internal_w();
}
inline void Trackable_Orientation::_internal_set_w(double value) {
  
  w_ = value;
}
inline void Trackable_Orientation::set_w(double value) {
  _internal_set_w(value);
  // @@protoc_insertion_point(field_set:RTLSProtocol.Trackable.Orientation.w)
}

// -------------------------------------------------------------------

// Trackable_Velocity

// float x = 1;
inline void Trackable_Velocity::clear_x() {
  x_ = 0;
}
inline float Trackable_Velocity::_internal_x() const {
  return x_;
}
inline float Trackable_Velocity::x() const {
  // @@protoc_insertion_point(field_get:RTLSProtocol.Trackable.Velocity.x)
  return _internal_x();
}
inline void Trackable_Velocity::_internal_set_x(float value) {
  
  x_ = value;
}
inline void Trackable_Velocity::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:RTLSProtocol.Trackable.Velocity.x)
}

// float y = 2;
inline void Trackable_Velocity::clear_y() {
  y_ = 0;
}
inline float Trackable_Velocity::_internal_y() const {
  return y_;
}
inline float Trackable_Velocity::y() const {
  // @@protoc_insertion_point(field_get:RTLSProtocol.Trackable.Velocity.y)
  return _internal_y();
}
inline void Trackable_Velocity::_internal_set_y(float value) {
  
  y_ = value;
}
inline void Trackable_Velocity::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:RTLSProtocol.Trackable.Velocity.y)
}

// float z = 3;
inline void Trackable_Velocity::clear_z() {
  z_ = 0;
}
inline float Trackable_Velocity::_internal_z() const {
  return z_;
}
inline float Trackable_Velocity::z() const {
  // @@protoc_insertion_point(field_get:RTLSProtocol.Trackable.Velocity.z)
  return _internal_z();
}
inline void Trackable_Velocity::_internal_set_z(float value) {
  
  z_ = value;
}
inline void Trackable_Velocity::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:RTLSProtocol.Trackable.Velocity.z)
}

// -------------------------------------------------------------------

// Trackable_Acceleration

// float x = 1;
inline void Trackable_Acceleration::clear_x() {
  x_ = 0;
}
inline float Trackable_Acceleration::_internal_x() const {
  return x_;
}
inline float Trackable_Acceleration::x() const {
  // @@protoc_insertion_point(field_get:RTLSProtocol.Trackable.Acceleration.x)
  return _internal_x();
}
inline void Trackable_Acceleration::_internal_set_x(float value) {
  
  x_ = value;
}
inline void Trackable_Acceleration::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:RTLSProtocol.Trackable.Acceleration.x)
}

// float y = 2;
inline void Trackable_Acceleration::clear_y() {
  y_ = 0;
}
inline float Trackable_Acceleration::_internal_y() const {
  return y_;
}
inline float Trackable_Acceleration::y() const {
  // @@protoc_insertion_point(field_get:RTLSProtocol.Trackable.Acceleration.y)
  return _internal_y();
}
inline void Trackable_Acceleration::_internal_set_y(float value) {
  
  y_ = value;
}
inline void Trackable_Acceleration::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:RTLSProtocol.Trackable.Acceleration.y)
}

// float z = 3;
inline void Trackable_Acceleration::clear_z() {
  z_ = 0;
}
inline float Trackable_Acceleration::_internal_z() const {
  return z_;
}
inline float Trackable_Acceleration::z() const {
  // @@protoc_insertion_point(field_get:RTLSProtocol.Trackable.Acceleration.z)
  return _internal_z();
}
inline void Trackable_Acceleration::_internal_set_z(float value) {
  
  z_ = value;
}
inline void Trackable_Acceleration::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:RTLSProtocol.Trackable.Acceleration.z)
}

// -------------------------------------------------------------------

// Trackable_AngularVelocity

// float x = 1;
inline void Trackable_AngularVelocity::clear_x() {
  x_ = 0;
}
inline float Trackable_AngularVelocity::_internal_x() const {
  return x_;
}
inline float Trackable_AngularVelocity::x() const {
  // @@protoc_insertion_point(field_get:RTLSProtocol.Trackable.AngularVelocity.x)
  return _internal_x();
}
inline void Trackable_AngularVelocity::_internal_set_x(float value) {
  
  x_ = value;
}
inline void Trackable_AngularVelocity::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:RTLSProtocol.Trackable.AngularVelocity.x)
}

// float y = 2;
inline void Trackable_AngularVelocity::clear_y() {
  y_ = 0;
}
inline float Trackable_AngularVelocity::_internal_y() const {
  return y_;
}
inline float Trackable_AngularVelocity::y() const {
  // @@protoc_insertion_point(field_get:RTLSProtocol.Trackable.AngularVelocity.y)
  return _internal_y();
}
inline void Trackable_AngularVelocity::_internal_set_y(float value) {
  
  y_ = value;
}
inline void Trackable_AngularVelocity::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:RTLSProtocol.Trackable.AngularVelocity.y)
}

// float z = 3;
inline void Trackable_AngularVelocity::clear_z() {
  z_ = 0;
}
inline float Trackable_AngularVelocity::_internal_z() const {
  return z_;
}
inline float Trackable_AngularVelocity::z() const {
  // @@protoc_insertion_point(field_get:RTLSProtocol.Trackable.AngularVelocity.z)
  return _internal_z();
}
inline void Trackable_AngularVelocity::_internal_set_z(float value) {
  
  z_ = value;
}
inline void Trackable_AngularVelocity::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:RTLSProtocol.Trackable.AngularVelocity.z)
}

// -------------------------------------------------------------------

// Trackable_AngularAcceleration

// float x = 1;
inline void Trackable_AngularAcceleration::clear_x() {
  x_ = 0;
}
inline float Trackable_AngularAcceleration::_internal_x() const {
  return x_;
}
inline float Trackable_AngularAcceleration::x() const {
  // @@protoc_insertion_point(field_get:RTLSProtocol.Trackable.AngularAcceleration.x)
  return _internal_x();
}
inline void Trackable_AngularAcceleration::_internal_set_x(float value) {
  
  x_ = value;
}
inline void Trackable_AngularAcceleration::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:RTLSProtocol.Trackable.AngularAcceleration.x)
}

// float y = 2;
inline void Trackable_AngularAcceleration::clear_y() {
  y_ = 0;
}
inline float Trackable_AngularAcceleration::_internal_y() const {
  return y_;
}
inline float Trackable_AngularAcceleration::y() const {
  // @@protoc_insertion_point(field_get:RTLSProtocol.Trackable.AngularAcceleration.y)
  return _internal_y();
}
inline void Trackable_AngularAcceleration::_internal_set_y(float value) {
  
  y_ = value;
}
inline void Trackable_AngularAcceleration::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:RTLSProtocol.Trackable.AngularAcceleration.y)
}

// float z = 3;
inline void Trackable_AngularAcceleration::clear_z() {
  z_ = 0;
}
inline float Trackable_AngularAcceleration::_internal_z() const {
  return z_;
}
inline float Trackable_AngularAcceleration::z() const {
  // @@protoc_insertion_point(field_get:RTLSProtocol.Trackable.AngularAcceleration.z)
  return _internal_z();
}
inline void Trackable_AngularAcceleration::_internal_set_z(float value) {
  
  z_ = value;
}
inline void Trackable_AngularAcceleration::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:RTLSProtocol.Trackable.AngularAcceleration.z)
}

// -------------------------------------------------------------------

// Trackable

// int32 id = 1;
inline void Trackable::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Trackable::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Trackable::id() const {
  // @@protoc_insertion_point(field_get:RTLSProtocol.Trackable.id)
  return _internal_id();
}
inline void Trackable::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void Trackable::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:RTLSProtocol.Trackable.id)
}

// bytes cuid = 2;
inline void Trackable::clear_cuid() {
  cuid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Trackable::cuid() const {
  // @@protoc_insertion_point(field_get:RTLSProtocol.Trackable.cuid)
  return _internal_cuid();
}
inline void Trackable::set_cuid(const std::string& value) {
  _internal_set_cuid(value);
  // @@protoc_insertion_point(field_set:RTLSProtocol.Trackable.cuid)
}
inline std::string* Trackable::mutable_cuid() {
  // @@protoc_insertion_point(field_mutable:RTLSProtocol.Trackable.cuid)
  return _internal_mutable_cuid();
}
inline const std::string& Trackable::_internal_cuid() const {
  return cuid_.GetNoArena();
}
inline void Trackable::_internal_set_cuid(const std::string& value) {
  
  cuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Trackable::set_cuid(std::string&& value) {
  
  cuid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RTLSProtocol.Trackable.cuid)
}
inline void Trackable::set_cuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RTLSProtocol.Trackable.cuid)
}
inline void Trackable::set_cuid(const void* value, size_t size) {
  
  cuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RTLSProtocol.Trackable.cuid)
}
inline std::string* Trackable::_internal_mutable_cuid() {
  
  return cuid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Trackable::release_cuid() {
  // @@protoc_insertion_point(field_release:RTLSProtocol.Trackable.cuid)
  
  return cuid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Trackable::set_allocated_cuid(std::string* cuid) {
  if (cuid != nullptr) {
    
  } else {
    
  }
  cuid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cuid);
  // @@protoc_insertion_point(field_set_allocated:RTLSProtocol.Trackable.cuid)
}

// string name = 3;
inline void Trackable::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Trackable::name() const {
  // @@protoc_insertion_point(field_get:RTLSProtocol.Trackable.name)
  return _internal_name();
}
inline void Trackable::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:RTLSProtocol.Trackable.name)
}
inline std::string* Trackable::mutable_name() {
  // @@protoc_insertion_point(field_mutable:RTLSProtocol.Trackable.name)
  return _internal_mutable_name();
}
inline const std::string& Trackable::_internal_name() const {
  return name_.GetNoArena();
}
inline void Trackable::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Trackable::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RTLSProtocol.Trackable.name)
}
inline void Trackable::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RTLSProtocol.Trackable.name)
}
inline void Trackable::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RTLSProtocol.Trackable.name)
}
inline std::string* Trackable::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Trackable::release_name() {
  // @@protoc_insertion_point(field_release:RTLSProtocol.Trackable.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Trackable::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:RTLSProtocol.Trackable.name)
}

// uint64 frame_ID = 10;
inline void Trackable::clear_frame_id() {
  frame_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Trackable::_internal_frame_id() const {
  return frame_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Trackable::frame_id() const {
  // @@protoc_insertion_point(field_get:RTLSProtocol.Trackable.frame_ID)
  return _internal_frame_id();
}
inline void Trackable::_internal_set_frame_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  frame_id_ = value;
}
inline void Trackable::set_frame_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_frame_id(value);
  // @@protoc_insertion_point(field_set:RTLSProtocol.Trackable.frame_ID)
}

// uint64 timestamp = 11;
inline void Trackable::clear_timestamp() {
  timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Trackable::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Trackable::timestamp() const {
  // @@protoc_insertion_point(field_get:RTLSProtocol.Trackable.timestamp)
  return _internal_timestamp();
}
inline void Trackable::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  timestamp_ = value;
}
inline void Trackable::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:RTLSProtocol.Trackable.timestamp)
}

// bytes context = 12;
inline void Trackable::clear_context() {
  context_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Trackable::context() const {
  // @@protoc_insertion_point(field_get:RTLSProtocol.Trackable.context)
  return _internal_context();
}
inline void Trackable::set_context(const std::string& value) {
  _internal_set_context(value);
  // @@protoc_insertion_point(field_set:RTLSProtocol.Trackable.context)
}
inline std::string* Trackable::mutable_context() {
  // @@protoc_insertion_point(field_mutable:RTLSProtocol.Trackable.context)
  return _internal_mutable_context();
}
inline const std::string& Trackable::_internal_context() const {
  return context_.GetNoArena();
}
inline void Trackable::_internal_set_context(const std::string& value) {
  
  context_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Trackable::set_context(std::string&& value) {
  
  context_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RTLSProtocol.Trackable.context)
}
inline void Trackable::set_context(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  context_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RTLSProtocol.Trackable.context)
}
inline void Trackable::set_context(const void* value, size_t size) {
  
  context_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RTLSProtocol.Trackable.context)
}
inline std::string* Trackable::_internal_mutable_context() {
  
  return context_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Trackable::release_context() {
  // @@protoc_insertion_point(field_release:RTLSProtocol.Trackable.context)
  
  return context_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Trackable::set_allocated_context(std::string* context) {
  if (context != nullptr) {
    
  } else {
    
  }
  context_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), context);
  // @@protoc_insertion_point(field_set_allocated:RTLSProtocol.Trackable.context)
}

// repeated .RTLSProtocol.Trackable children = 13;
inline int Trackable::_internal_children_size() const {
  return children_.size();
}
inline int Trackable::children_size() const {
  return _internal_children_size();
}
inline void Trackable::clear_children() {
  children_.Clear();
}
inline ::RTLSProtocol::Trackable* Trackable::mutable_children(int index) {
  // @@protoc_insertion_point(field_mutable:RTLSProtocol.Trackable.children)
  return children_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RTLSProtocol::Trackable >*
Trackable::mutable_children() {
  // @@protoc_insertion_point(field_mutable_list:RTLSProtocol.Trackable.children)
  return &children_;
}
inline const ::RTLSProtocol::Trackable& Trackable::_internal_children(int index) const {
  return children_.Get(index);
}
inline const ::RTLSProtocol::Trackable& Trackable::children(int index) const {
  // @@protoc_insertion_point(field_get:RTLSProtocol.Trackable.children)
  return _internal_children(index);
}
inline ::RTLSProtocol::Trackable* Trackable::_internal_add_children() {
  return children_.Add();
}
inline ::RTLSProtocol::Trackable* Trackable::add_children() {
  // @@protoc_insertion_point(field_add:RTLSProtocol.Trackable.children)
  return _internal_add_children();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RTLSProtocol::Trackable >&
Trackable::children() const {
  // @@protoc_insertion_point(field_list:RTLSProtocol.Trackable.children)
  return children_;
}

// .RTLSProtocol.Trackable.Position position = 4;
inline bool Trackable::_internal_has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline bool Trackable::has_position() const {
  return _internal_has_position();
}
inline void Trackable::clear_position() {
  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
inline const ::RTLSProtocol::Trackable_Position& Trackable::_internal_position() const {
  const ::RTLSProtocol::Trackable_Position* p = position_;
  return p != nullptr ? *p : *reinterpret_cast<const ::RTLSProtocol::Trackable_Position*>(
      &::RTLSProtocol::_Trackable_Position_default_instance_);
}
inline const ::RTLSProtocol::Trackable_Position& Trackable::position() const {
  // @@protoc_insertion_point(field_get:RTLSProtocol.Trackable.position)
  return _internal_position();
}
inline ::RTLSProtocol::Trackable_Position* Trackable::release_position() {
  // @@protoc_insertion_point(field_release:RTLSProtocol.Trackable.position)
  
  ::RTLSProtocol::Trackable_Position* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::RTLSProtocol::Trackable_Position* Trackable::_internal_mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::RTLSProtocol::Trackable_Position>(GetArenaNoVirtual());
    position_ = p;
  }
  return position_;
}
inline ::RTLSProtocol::Trackable_Position* Trackable::mutable_position() {
  // @@protoc_insertion_point(field_mutable:RTLSProtocol.Trackable.position)
  return _internal_mutable_position();
}
inline void Trackable::set_allocated_position(::RTLSProtocol::Trackable_Position* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete position_;
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:RTLSProtocol.Trackable.position)
}

// .RTLSProtocol.Trackable.Orientation orientation = 5;
inline bool Trackable::_internal_has_orientation() const {
  return this != internal_default_instance() && orientation_ != nullptr;
}
inline bool Trackable::has_orientation() const {
  return _internal_has_orientation();
}
inline void Trackable::clear_orientation() {
  if (GetArenaNoVirtual() == nullptr && orientation_ != nullptr) {
    delete orientation_;
  }
  orientation_ = nullptr;
}
inline const ::RTLSProtocol::Trackable_Orientation& Trackable::_internal_orientation() const {
  const ::RTLSProtocol::Trackable_Orientation* p = orientation_;
  return p != nullptr ? *p : *reinterpret_cast<const ::RTLSProtocol::Trackable_Orientation*>(
      &::RTLSProtocol::_Trackable_Orientation_default_instance_);
}
inline const ::RTLSProtocol::Trackable_Orientation& Trackable::orientation() const {
  // @@protoc_insertion_point(field_get:RTLSProtocol.Trackable.orientation)
  return _internal_orientation();
}
inline ::RTLSProtocol::Trackable_Orientation* Trackable::release_orientation() {
  // @@protoc_insertion_point(field_release:RTLSProtocol.Trackable.orientation)
  
  ::RTLSProtocol::Trackable_Orientation* temp = orientation_;
  orientation_ = nullptr;
  return temp;
}
inline ::RTLSProtocol::Trackable_Orientation* Trackable::_internal_mutable_orientation() {
  
  if (orientation_ == nullptr) {
    auto* p = CreateMaybeMessage<::RTLSProtocol::Trackable_Orientation>(GetArenaNoVirtual());
    orientation_ = p;
  }
  return orientation_;
}
inline ::RTLSProtocol::Trackable_Orientation* Trackable::mutable_orientation() {
  // @@protoc_insertion_point(field_mutable:RTLSProtocol.Trackable.orientation)
  return _internal_mutable_orientation();
}
inline void Trackable::set_allocated_orientation(::RTLSProtocol::Trackable_Orientation* orientation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete orientation_;
  }
  if (orientation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      orientation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, orientation, submessage_arena);
    }
    
  } else {
    
  }
  orientation_ = orientation;
  // @@protoc_insertion_point(field_set_allocated:RTLSProtocol.Trackable.orientation)
}

// .RTLSProtocol.Trackable.Velocity velocity = 6;
inline bool Trackable::_internal_has_velocity() const {
  return this != internal_default_instance() && velocity_ != nullptr;
}
inline bool Trackable::has_velocity() const {
  return _internal_has_velocity();
}
inline void Trackable::clear_velocity() {
  if (GetArenaNoVirtual() == nullptr && velocity_ != nullptr) {
    delete velocity_;
  }
  velocity_ = nullptr;
}
inline const ::RTLSProtocol::Trackable_Velocity& Trackable::_internal_velocity() const {
  const ::RTLSProtocol::Trackable_Velocity* p = velocity_;
  return p != nullptr ? *p : *reinterpret_cast<const ::RTLSProtocol::Trackable_Velocity*>(
      &::RTLSProtocol::_Trackable_Velocity_default_instance_);
}
inline const ::RTLSProtocol::Trackable_Velocity& Trackable::velocity() const {
  // @@protoc_insertion_point(field_get:RTLSProtocol.Trackable.velocity)
  return _internal_velocity();
}
inline ::RTLSProtocol::Trackable_Velocity* Trackable::release_velocity() {
  // @@protoc_insertion_point(field_release:RTLSProtocol.Trackable.velocity)
  
  ::RTLSProtocol::Trackable_Velocity* temp = velocity_;
  velocity_ = nullptr;
  return temp;
}
inline ::RTLSProtocol::Trackable_Velocity* Trackable::_internal_mutable_velocity() {
  
  if (velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::RTLSProtocol::Trackable_Velocity>(GetArenaNoVirtual());
    velocity_ = p;
  }
  return velocity_;
}
inline ::RTLSProtocol::Trackable_Velocity* Trackable::mutable_velocity() {
  // @@protoc_insertion_point(field_mutable:RTLSProtocol.Trackable.velocity)
  return _internal_mutable_velocity();
}
inline void Trackable::set_allocated_velocity(::RTLSProtocol::Trackable_Velocity* velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete velocity_;
  }
  if (velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, velocity, submessage_arena);
    }
    
  } else {
    
  }
  velocity_ = velocity;
  // @@protoc_insertion_point(field_set_allocated:RTLSProtocol.Trackable.velocity)
}

// .RTLSProtocol.Trackable.Acceleration acceleration = 7;
inline bool Trackable::_internal_has_acceleration() const {
  return this != internal_default_instance() && acceleration_ != nullptr;
}
inline bool Trackable::has_acceleration() const {
  return _internal_has_acceleration();
}
inline void Trackable::clear_acceleration() {
  if (GetArenaNoVirtual() == nullptr && acceleration_ != nullptr) {
    delete acceleration_;
  }
  acceleration_ = nullptr;
}
inline const ::RTLSProtocol::Trackable_Acceleration& Trackable::_internal_acceleration() const {
  const ::RTLSProtocol::Trackable_Acceleration* p = acceleration_;
  return p != nullptr ? *p : *reinterpret_cast<const ::RTLSProtocol::Trackable_Acceleration*>(
      &::RTLSProtocol::_Trackable_Acceleration_default_instance_);
}
inline const ::RTLSProtocol::Trackable_Acceleration& Trackable::acceleration() const {
  // @@protoc_insertion_point(field_get:RTLSProtocol.Trackable.acceleration)
  return _internal_acceleration();
}
inline ::RTLSProtocol::Trackable_Acceleration* Trackable::release_acceleration() {
  // @@protoc_insertion_point(field_release:RTLSProtocol.Trackable.acceleration)
  
  ::RTLSProtocol::Trackable_Acceleration* temp = acceleration_;
  acceleration_ = nullptr;
  return temp;
}
inline ::RTLSProtocol::Trackable_Acceleration* Trackable::_internal_mutable_acceleration() {
  
  if (acceleration_ == nullptr) {
    auto* p = CreateMaybeMessage<::RTLSProtocol::Trackable_Acceleration>(GetArenaNoVirtual());
    acceleration_ = p;
  }
  return acceleration_;
}
inline ::RTLSProtocol::Trackable_Acceleration* Trackable::mutable_acceleration() {
  // @@protoc_insertion_point(field_mutable:RTLSProtocol.Trackable.acceleration)
  return _internal_mutable_acceleration();
}
inline void Trackable::set_allocated_acceleration(::RTLSProtocol::Trackable_Acceleration* acceleration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete acceleration_;
  }
  if (acceleration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      acceleration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, acceleration, submessage_arena);
    }
    
  } else {
    
  }
  acceleration_ = acceleration;
  // @@protoc_insertion_point(field_set_allocated:RTLSProtocol.Trackable.acceleration)
}

// .RTLSProtocol.Trackable.AngularVelocity angular_velocity = 8;
inline bool Trackable::_internal_has_angular_velocity() const {
  return this != internal_default_instance() && angular_velocity_ != nullptr;
}
inline bool Trackable::has_angular_velocity() const {
  return _internal_has_angular_velocity();
}
inline void Trackable::clear_angular_velocity() {
  if (GetArenaNoVirtual() == nullptr && angular_velocity_ != nullptr) {
    delete angular_velocity_;
  }
  angular_velocity_ = nullptr;
}
inline const ::RTLSProtocol::Trackable_AngularVelocity& Trackable::_internal_angular_velocity() const {
  const ::RTLSProtocol::Trackable_AngularVelocity* p = angular_velocity_;
  return p != nullptr ? *p : *reinterpret_cast<const ::RTLSProtocol::Trackable_AngularVelocity*>(
      &::RTLSProtocol::_Trackable_AngularVelocity_default_instance_);
}
inline const ::RTLSProtocol::Trackable_AngularVelocity& Trackable::angular_velocity() const {
  // @@protoc_insertion_point(field_get:RTLSProtocol.Trackable.angular_velocity)
  return _internal_angular_velocity();
}
inline ::RTLSProtocol::Trackable_AngularVelocity* Trackable::release_angular_velocity() {
  // @@protoc_insertion_point(field_release:RTLSProtocol.Trackable.angular_velocity)
  
  ::RTLSProtocol::Trackable_AngularVelocity* temp = angular_velocity_;
  angular_velocity_ = nullptr;
  return temp;
}
inline ::RTLSProtocol::Trackable_AngularVelocity* Trackable::_internal_mutable_angular_velocity() {
  
  if (angular_velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::RTLSProtocol::Trackable_AngularVelocity>(GetArenaNoVirtual());
    angular_velocity_ = p;
  }
  return angular_velocity_;
}
inline ::RTLSProtocol::Trackable_AngularVelocity* Trackable::mutable_angular_velocity() {
  // @@protoc_insertion_point(field_mutable:RTLSProtocol.Trackable.angular_velocity)
  return _internal_mutable_angular_velocity();
}
inline void Trackable::set_allocated_angular_velocity(::RTLSProtocol::Trackable_AngularVelocity* angular_velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete angular_velocity_;
  }
  if (angular_velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      angular_velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, angular_velocity, submessage_arena);
    }
    
  } else {
    
  }
  angular_velocity_ = angular_velocity;
  // @@protoc_insertion_point(field_set_allocated:RTLSProtocol.Trackable.angular_velocity)
}

// .RTLSProtocol.Trackable.AngularAcceleration angular_acceleration = 9;
inline bool Trackable::_internal_has_angular_acceleration() const {
  return this != internal_default_instance() && angular_acceleration_ != nullptr;
}
inline bool Trackable::has_angular_acceleration() const {
  return _internal_has_angular_acceleration();
}
inline void Trackable::clear_angular_acceleration() {
  if (GetArenaNoVirtual() == nullptr && angular_acceleration_ != nullptr) {
    delete angular_acceleration_;
  }
  angular_acceleration_ = nullptr;
}
inline const ::RTLSProtocol::Trackable_AngularAcceleration& Trackable::_internal_angular_acceleration() const {
  const ::RTLSProtocol::Trackable_AngularAcceleration* p = angular_acceleration_;
  return p != nullptr ? *p : *reinterpret_cast<const ::RTLSProtocol::Trackable_AngularAcceleration*>(
      &::RTLSProtocol::_Trackable_AngularAcceleration_default_instance_);
}
inline const ::RTLSProtocol::Trackable_AngularAcceleration& Trackable::angular_acceleration() const {
  // @@protoc_insertion_point(field_get:RTLSProtocol.Trackable.angular_acceleration)
  return _internal_angular_acceleration();
}
inline ::RTLSProtocol::Trackable_AngularAcceleration* Trackable::release_angular_acceleration() {
  // @@protoc_insertion_point(field_release:RTLSProtocol.Trackable.angular_acceleration)
  
  ::RTLSProtocol::Trackable_AngularAcceleration* temp = angular_acceleration_;
  angular_acceleration_ = nullptr;
  return temp;
}
inline ::RTLSProtocol::Trackable_AngularAcceleration* Trackable::_internal_mutable_angular_acceleration() {
  
  if (angular_acceleration_ == nullptr) {
    auto* p = CreateMaybeMessage<::RTLSProtocol::Trackable_AngularAcceleration>(GetArenaNoVirtual());
    angular_acceleration_ = p;
  }
  return angular_acceleration_;
}
inline ::RTLSProtocol::Trackable_AngularAcceleration* Trackable::mutable_angular_acceleration() {
  // @@protoc_insertion_point(field_mutable:RTLSProtocol.Trackable.angular_acceleration)
  return _internal_mutable_angular_acceleration();
}
inline void Trackable::set_allocated_angular_acceleration(::RTLSProtocol::Trackable_AngularAcceleration* angular_acceleration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete angular_acceleration_;
  }
  if (angular_acceleration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      angular_acceleration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, angular_acceleration, submessage_arena);
    }
    
  } else {
    
  }
  angular_acceleration_ = angular_acceleration;
  // @@protoc_insertion_point(field_set_allocated:RTLSProtocol.Trackable.angular_acceleration)
}

// -------------------------------------------------------------------

// TrackableFrame

// uint64 frame_ID = 1;
inline void TrackableFrame::clear_frame_id() {
  frame_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TrackableFrame::_internal_frame_id() const {
  return frame_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TrackableFrame::frame_id() const {
  // @@protoc_insertion_point(field_get:RTLSProtocol.TrackableFrame.frame_ID)
  return _internal_frame_id();
}
inline void TrackableFrame::_internal_set_frame_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  frame_id_ = value;
}
inline void TrackableFrame::set_frame_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_frame_id(value);
  // @@protoc_insertion_point(field_set:RTLSProtocol.TrackableFrame.frame_ID)
}

// uint64 timestamp = 2;
inline void TrackableFrame::clear_timestamp() {
  timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TrackableFrame::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TrackableFrame::timestamp() const {
  // @@protoc_insertion_point(field_get:RTLSProtocol.TrackableFrame.timestamp)
  return _internal_timestamp();
}
inline void TrackableFrame::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  timestamp_ = value;
}
inline void TrackableFrame::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:RTLSProtocol.TrackableFrame.timestamp)
}

// repeated .RTLSProtocol.Trackable trackables = 3;
inline int TrackableFrame::_internal_trackables_size() const {
  return trackables_.size();
}
inline int TrackableFrame::trackables_size() const {
  return _internal_trackables_size();
}
inline void TrackableFrame::clear_trackables() {
  trackables_.Clear();
}
inline ::RTLSProtocol::Trackable* TrackableFrame::mutable_trackables(int index) {
  // @@protoc_insertion_point(field_mutable:RTLSProtocol.TrackableFrame.trackables)
  return trackables_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RTLSProtocol::Trackable >*
TrackableFrame::mutable_trackables() {
  // @@protoc_insertion_point(field_mutable_list:RTLSProtocol.TrackableFrame.trackables)
  return &trackables_;
}
inline const ::RTLSProtocol::Trackable& TrackableFrame::_internal_trackables(int index) const {
  return trackables_.Get(index);
}
inline const ::RTLSProtocol::Trackable& TrackableFrame::trackables(int index) const {
  // @@protoc_insertion_point(field_get:RTLSProtocol.TrackableFrame.trackables)
  return _internal_trackables(index);
}
inline ::RTLSProtocol::Trackable* TrackableFrame::_internal_add_trackables() {
  return trackables_.Add();
}
inline ::RTLSProtocol::Trackable* TrackableFrame::add_trackables() {
  // @@protoc_insertion_point(field_add:RTLSProtocol.TrackableFrame.trackables)
  return _internal_add_trackables();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RTLSProtocol::Trackable >&
TrackableFrame::trackables() const {
  // @@protoc_insertion_point(field_list:RTLSProtocol.TrackableFrame.trackables)
  return trackables_;
}

// bytes context = 4;
inline void TrackableFrame::clear_context() {
  context_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TrackableFrame::context() const {
  // @@protoc_insertion_point(field_get:RTLSProtocol.TrackableFrame.context)
  return _internal_context();
}
inline void TrackableFrame::set_context(const std::string& value) {
  _internal_set_context(value);
  // @@protoc_insertion_point(field_set:RTLSProtocol.TrackableFrame.context)
}
inline std::string* TrackableFrame::mutable_context() {
  // @@protoc_insertion_point(field_mutable:RTLSProtocol.TrackableFrame.context)
  return _internal_mutable_context();
}
inline const std::string& TrackableFrame::_internal_context() const {
  return context_.GetNoArena();
}
inline void TrackableFrame::_internal_set_context(const std::string& value) {
  
  context_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TrackableFrame::set_context(std::string&& value) {
  
  context_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RTLSProtocol.TrackableFrame.context)
}
inline void TrackableFrame::set_context(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  context_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RTLSProtocol.TrackableFrame.context)
}
inline void TrackableFrame::set_context(const void* value, size_t size) {
  
  context_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RTLSProtocol.TrackableFrame.context)
}
inline std::string* TrackableFrame::_internal_mutable_context() {
  
  return context_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TrackableFrame::release_context() {
  // @@protoc_insertion_point(field_release:RTLSProtocol.TrackableFrame.context)
  
  return context_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TrackableFrame::set_allocated_context(std::string* context) {
  if (context != nullptr) {
    
  } else {
    
  }
  context_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), context);
  // @@protoc_insertion_point(field_set_allocated:RTLSProtocol.TrackableFrame.context)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace RTLSProtocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Trackable_2eproto
